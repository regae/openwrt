From c076964c629aaa1dbb94a96964994dd318ac7361 Mon Sep 17 00:00:00 2001
From: Ratheesh Kannoth <rkannoth@codeaurora.org>
Date: Fri, 15 May 2020 19:24:19 +0530
Subject: [PATCH] net/bonding: Fix for Load Balancing within bonding (LAG)
 group

 New APIs (without skb) introduced in bonding driver to calculate hash on give
 parameters (IP version, src IP, dst IP, src MAC, dst MAC) has bug in creating
 flow_key.  flow_get_u32_dst is returning 0 for given flow_key because addr_type
 is not set correctly.  Fix is added to populate addr_type.  Test different flows
 and verified that the flows are distributed.

Change-Id: Ie54a40f590010ea2994ffc4ace8f4d050258a06f
Signed-off-by: Bhaskar Valaboju <bhaskarv@codeaurora.org>
Signed-off-by: Ratheesh Kannoth <rkannoth@codeaurora.org>
---
 drivers/net/bonding/bond_main.c | 4 ++++
 1 file changed, 4 insertions(+)

--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -3827,11 +3827,15 @@ static bool bond_flow_dissect_without_sk
 	dst = (uint32_t *)pdst;
 
 	if (protocol == htons(ETH_P_IP)) {
+		/* V4 addresses and address type*/
 		fk->addrs.v4addrs.src = src[0];
 		fk->addrs.v4addrs.dst = dst[0];
+		fk->control.addr_type = FLOW_DISSECTOR_KEY_IPV4_ADDRS;
 	} else if (protocol == htons(ETH_P_IPV6)) {
+		/* V6 addresses and address type*/
 		memcpy(&fk->addrs.v6addrs.src, src, sizeof(struct in6_addr));
 		memcpy(&fk->addrs.v6addrs.dst, dst, sizeof(struct in6_addr));
+		fk->control.addr_type = FLOW_DISSECTOR_KEY_IPV6_ADDRS;
 	} else {
 		return false;
 	}
