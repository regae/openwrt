From e9f4160bdb8f2144f18e6eda9521e98ce48e5baf Mon Sep 17 00:00:00 2001
From: Tian Yang <tiany@codeaurora.org>
Date: Thu, 3 Nov 2016 09:41:34 -0500
Subject: [PATCH] Print more information in skb debug

For added clarity, print which CPU the skb list belongs to.
When printing the global list, print current CPU instead.
Print current and expected checksum for each skb in the list.
Print exactly where and on which skb the checksum was being verified.

Change-Id: I972bd65f4f5105c37f70b7e6b0cd51cafb102e4b
Signed-off-by: Cristian Prundeanu <cprundea@codeaurora.org>
Signed-off-by: Casey Chen <kexinc@codeaurora.org>
---
 net/core/skbuff_debug.c   | 31 ++++++++++++++++++++++++++-----
 net/core/skbuff_debug.h   | 11 ++++++++---
 net/core/skbuff_recycle.c |  6 +++---
 3 files changed, 37 insertions(+), 11 deletions(-)

--- a/net/core/skbuff_debug.c
+++ b/net/core/skbuff_debug.c
@@ -18,6 +18,7 @@
 #include <asm/current.h>
 #include <linux/sched.h>
 #include <linux/module.h>
+#include <linux/smp.h>
 
 #include "skbuff_debug.h"
 #include "skbuff_notifier.h"
@@ -223,7 +224,9 @@ inline void skbuff_debugobj_deactivate(s
 	skb_recycler_notifier_send_event(SKB_RECYCLER_NOTIFIER_DBLFREE, skb);
 }
 
-inline void skbuff_debugobj_sum_validate(struct sk_buff *skb)
+inline void _skbuff_debugobj_sum_validate(struct sk_buff *skb,
+					  const char *var, const char *src,
+					  int line, const char *fxn)
 {
 	if (!skbuff_debugobj_enabled || !skb)
 		return;
@@ -234,6 +237,7 @@ inline void skbuff_debugobj_sum_validate
 	ftrace_dump(DUMP_ALL);
 	WARN(1, "skb_debug: skb sum changed skb = 0x%p sum = %d (now %d)\n",
 	     skb, skb->sum, skbuff_debugobj_sum(skb));
+	pr_emerg("skb_debug: %s() checking %s in %s:%d\n", fxn, var, src, line);
 	skb_recycler_notifier_send_event(SKB_RECYCLER_NOTIFIER_SUMERR, skb);
 }
 
@@ -264,19 +268,36 @@ static int __init disable_object_debug(c
 early_param("no_skbuff_debug_objects", disable_object_debug);
 
 void skbuff_debugobj_print_skb_list(const struct sk_buff *skb_list,
-				    const char *list_title)
+	pr_emerg("skb_debug: start skb list '%s'\n", list_title);
+				    const char *list_title, int cpu)
 {
 	int count;
 	const struct sk_buff *skb_i;
+	u32 sum_i, sum_now;
+	int obj_state;
 
-	pr_emerg("skb_debug: start skb list '%s'\n", list_title);
+	if (cpu < 0) {
+		cpu = get_cpu();
+		put_cpu();
+	}
+	pr_emerg("skb_debug: start skb list '%s' [CPU#%d]\n", list_title, cpu);
 	skb_i = skb_list;
 	count = 0;
 	if (skb_list) {
 		do {
-			pr_emerg("skb_debug: [%02d] skb 0x%p, next 0x%p, prev 0x%p, state %s\n",
+			obj_state =
+				debug_object_get_state((struct sk_buff *)skb_i);
+			if (obj_state < ODEBUG_STATE_NOTAVAILABLE) {
+				sum_i = skb_i->sum;
+				sum_now = skbuff_debugobj_sum(skb_i);
+			} else {
+				sum_i = 0;
+				sum_now = 0;
+			}
+			pr_emerg("skb_debug: [%02d] skb 0x%p, next 0x%p, prev 0x%p, state %d (%s), sum %d (now %d)\n",
 				 count, skb_i, skb_i->next, skb_i->prev,
-				 skbuff_debugobj_state_name(skb_i));
+				 obj_state, skbuff_debugobj_state_name(skb_i),
+				 sum_i, sum_now);
 			skb_i = skb_i->next;
 			count++;
 		} while (skb_list != skb_i);
--- a/net/core/skbuff_debug.h
+++ b/net/core/skbuff_debug.h
@@ -25,13 +25,17 @@ void skbuff_debugobj_init_and_activate(s
 void skbuff_debugobj_activate(struct sk_buff *skb);
 void skbuff_debugobj_deactivate(struct sk_buff *skb);
 void skbuff_debugobj_destroy(struct sk_buff *skb);
-void skbuff_debugobj_sum_validate(struct sk_buff *skb);
+#define skbuff_debugobj_sum_validate(skb) _skbuff_debugobj_sum_validate(skb, \
+		#skb, __FILE__, __LINE__, __func__)
+void _skbuff_debugobj_sum_validate(struct sk_buff *skb, const char *var,
+				   const char *src, int line, const char *fxn);
 void skbuff_debugobj_sum_update(struct sk_buff *skb);
 void skbuff_debugobj_print_skb(const struct sk_buff *skb);
 
 void skbuff_debugobj_print_skb_list(const struct sk_buff *skb_list,
-				    const char *list_title);
+				    const char *list_title, int cpu);
 void skbuff_debugobj_register_callback(void);
+
 #else
 static inline void skbuff_debugobj_init_and_activate(struct sk_buff *skb) { }
 static inline void skbuff_debugobj_activate(struct sk_buff *skb) { }
@@ -41,8 +45,9 @@ static inline void skbuff_debugobj_sum_v
 static inline void skbuff_debugobj_sum_update(struct sk_buff *skb) { }
 static inline void skbuff_debugobj_print_skb(const struct sk_buff *skb) { }
 
+
 static inline void skbuff_debugobj_print_skb_list
-		   (const struct sk_buff *skb_list, const char *list_title) { }
+	(const struct sk_buff *skb_list, const char *list_title, int cpu) { }
 static inline void skbuff_debugobj_register_callback(void) { }
 #endif
 
--- a/net/core/skbuff_recycle.c
+++ b/net/core/skbuff_recycle.c
@@ -544,7 +544,7 @@ void skb_recycler_print_all_lists(void)
 	spin_lock_irqsave(&glob_recycler.lock, flags);
 	for (i = 0; i < SKB_RECYCLE_MAX_SHARED_POOLS; i++)
 		skbuff_debugobj_print_skb_list((&glob_recycler.pool[i])->next,
-					       "Global Pool");
+					       "Global Pool", -1);
 	spin_unlock_irqrestore(&glob_recycler.lock, flags);
 
 	preempt_disable();
@@ -554,7 +554,7 @@ void skb_recycler_print_all_lists(void)
 		struct sk_buff_head *h;
 
 		h = &per_cpu(recycle_spare_list, cpu);
-		skbuff_debugobj_print_skb_list(h->next, "Recycle Spare");
+		skbuff_debugobj_print_skb_list(h->next, "Recycle Spare", cpu);
 	}
 	local_irq_restore(flags);
 	preempt_enable();
@@ -567,7 +567,7 @@ void skb_recycler_print_all_lists(void)
 		struct sk_buff_head *h;
 
 		h = &per_cpu(recycle_list, cpu);
-		skbuff_debugobj_print_skb_list(h->next, "Recycle List");
+		skbuff_debugobj_print_skb_list(h->next, "Recycle List", cpu);
 	}
 	local_irq_restore(flags);
 	preempt_enable();
