From 61dd0fb740414dfdd4dcfde77024717ea1928484 Mon Sep 17 00:00:00 2001
From: Tian Yang <tiany@codeaurora.org>
Date: Fri, 28 Oct 2016 02:25:57 -0500
Subject: [PATCH] Use notifier API

Register to the skb debug notifier and print all SKB lists.
Use this commit as an example of using the skb debug notifier.

Change-Id: I0cb9c72496726a21535c40082cba632cc26ed41b
Signed-off-by: Cristian Prundeanu <cprundea@codeaurora.org>
Signed-off-by: Casey Chen <kexinc@codeaurora.org>
---
 net/core/skbuff_debug.c   | 50 +++++++++++++++++++++++++++++++++++----
 net/core/skbuff_debug.h   |  8 +++++++
 net/core/skbuff_recycle.c | 40 +++++++++++++++++++++++++++++++
 net/core/skbuff_recycle.h |  2 ++
 4 files changed, 96 insertions(+), 4 deletions(-)

--- a/net/core/skbuff_debug.c
+++ b/net/core/skbuff_debug.c
@@ -21,9 +21,17 @@
 
 #include "skbuff_debug.h"
 #include "skbuff_notifier.h"
+#include "skbuff_recycle.h"
 
 static int skbuff_debugobj_enabled __read_mostly = 1;
 
+static int skbuff_debug_event_handler(struct notifier_block *nb,
+				      unsigned long action, void *data);
+static struct notifier_block skbuff_debug_notify = {
+	.notifier_call = skbuff_debug_event_handler,
+	.priority = 0
+};
+
 inline u32 skbuff_debugobj_sum(struct sk_buff *skb)
 {
 	int pos = offsetof(struct sk_buff, free_addr);
@@ -138,7 +146,6 @@ static int skbuff_debugobj_fixup(void *a
 	ftrace_dump(DUMP_ALL);
 	WARN(1, "skb_debug: state = %d, skb = 0x%p sum = %d (now %d)\n",
 	     state, skb, skb->sum, skbuff_debugobj_sum(skb));
-	skbuff_debugobj_print_skb(skb);
 	skb_recycler_notifier_send_event(SKB_RECYCLER_NOTIFIER_FSM, skb);
 
 #ifdef CONFIG_ARM64
@@ -176,7 +183,6 @@ err_act:
 	ftrace_dump(DUMP_ALL);
 	WARN(1, "skb_debug: failed to activate err = %d skb = 0x%p sum = %d (now %d)\n",
 	     ret, skb, skb->sum, skbuff_debugobj_sum(skb));
-	skbuff_debugobj_print_skb(skb);
 	skb_recycler_notifier_send_event(SKB_RECYCLER_NOTIFIER_DBLALLOC, skb);
 }
 
@@ -214,7 +220,6 @@ inline void skbuff_debugobj_deactivate(s
 	ftrace_dump(DUMP_ALL);
 	WARN(1, "skb_debug: deactivating inactive object skb=0x%p state=%d sum = %d (now %d)\n",
 	     skb, obj_state, skb->sum, skbuff_debugobj_sum(skb));
-	skbuff_debugobj_print_skb(skb);
 	skb_recycler_notifier_send_event(SKB_RECYCLER_NOTIFIER_DBLFREE, skb);
 }
 
@@ -229,7 +234,6 @@ inline void skbuff_debugobj_sum_validate
 	ftrace_dump(DUMP_ALL);
 	WARN(1, "skb_debug: skb sum changed skb = 0x%p sum = %d (now %d)\n",
 	     skb, skb->sum, skbuff_debugobj_sum(skb));
-	skbuff_debugobj_print_skb(skb);
 	skb_recycler_notifier_send_event(SKB_RECYCLER_NOTIFIER_SUMERR, skb);
 }
 
@@ -258,3 +262,41 @@ static int __init disable_object_debug(c
 }
 
 early_param("no_skbuff_debug_objects", disable_object_debug);
+
+void skbuff_debugobj_print_skb_list(const struct sk_buff *skb_list,
+				    const char *list_title)
+{
+	int count;
+	const struct sk_buff *skb_i;
+
+	pr_emerg("skb_debug: start skb list '%s'\n", list_title);
+	skb_i = skb_list;
+	count = 0;
+	if (skb_list) {
+		do {
+			pr_emerg("skb_debug: [%02d] skb 0x%p, next 0x%p, prev 0x%p, state %s\n",
+				 count, skb_i, skb_i->next, skb_i->prev,
+				 skbuff_debugobj_state_name(skb_i));
+			skb_i = skb_i->next;
+			count++;
+		} while (skb_list != skb_i);
+	}
+	pr_emerg("skb_debug: end skb list '%s'\n", list_title);
+}
+
+void skbuff_debugobj_register_callback(void)
+{
+	skb_recycler_notifier_register(&skbuff_debug_notify);
+}
+
+int skbuff_debug_event_handler(struct notifier_block *nb, unsigned long action,
+			       void *data)
+{
+	struct sk_buff *skb = (struct sk_buff *)data;
+
+	pr_emerg("skb_debug: notifier event %lu\n", action);
+	skbuff_debugobj_print_skb(skb);
+	skb_recycler_print_all_lists();
+
+	return NOTIFY_DONE;
+}
--- a/net/core/skbuff_debug.h
+++ b/net/core/skbuff_debug.h
@@ -28,6 +28,10 @@ void skbuff_debugobj_destroy(struct sk_b
 void skbuff_debugobj_sum_validate(struct sk_buff *skb);
 void skbuff_debugobj_sum_update(struct sk_buff *skb);
 void skbuff_debugobj_print_skb(const struct sk_buff *skb);
+
+void skbuff_debugobj_print_skb_list(const struct sk_buff *skb_list,
+				    const char *list_title);
+void skbuff_debugobj_register_callback(void);
 #else
 static inline void skbuff_debugobj_init_and_activate(struct sk_buff *skb) { }
 static inline void skbuff_debugobj_activate(struct sk_buff *skb) { }
@@ -36,6 +40,10 @@ static inline void skbuff_debugobj_destr
 static inline void skbuff_debugobj_sum_validate(struct sk_buff *skb) { }
 static inline void skbuff_debugobj_sum_update(struct sk_buff *skb) { }
 static inline void skbuff_debugobj_print_skb(const struct sk_buff *skb) { }
+
+static inline void skbuff_debugobj_print_skb_list
+		   (const struct sk_buff *skb_list, const char *list_title) { }
+static inline void skbuff_debugobj_register_callback(void) { }
 #endif
 
 #endif /* _LINUX_SKBBUFF_DEBUG_OBJECTS */
--- a/net/core/skbuff_recycle.c
+++ b/net/core/skbuff_recycle.c
@@ -530,5 +530,45 @@ void __init skb_recycler_init(void)
 		pr_err("Failed to preallocate SKBs for recycle list\n");
 #endif
 	cpuhp_setup_state_nocalls(CPUHP_NET_DEV_DEAD, "net/skbuff_recycler:dead:",NULL, skb_cpu_callback);
+	skbuff_debugobj_register_callback();
 	skb_recycler_init_procfs();
 }
+
+void skb_recycler_print_all_lists(void)
+{
+	unsigned long flags;
+	int cpu;
+#ifdef CONFIG_SKB_RECYCLER_MULTI_CPU
+	int i;
+
+	spin_lock_irqsave(&glob_recycler.lock, flags);
+	for (i = 0; i < SKB_RECYCLE_MAX_SHARED_POOLS; i++)
+		skbuff_debugobj_print_skb_list((&glob_recycler.pool[i])->next,
+					       "Global Pool");
+	spin_unlock_irqrestore(&glob_recycler.lock, flags);
+
+	preempt_disable();
+	local_irq_save(flags);
+	for_each_possible_cpu(cpu) {
+		unsigned long flags;
+		struct sk_buff_head *h;
+
+		h = &per_cpu(recycle_spare_list, cpu);
+		skbuff_debugobj_print_skb_list(h->next, "Recycle Spare");
+	}
+	local_irq_restore(flags);
+	preempt_enable();
+#endif
+
+	preempt_disable();
+	local_irq_save(flags);
+	for_each_possible_cpu(cpu) {
+		unsigned long flags;
+		struct sk_buff_head *h;
+
+		h = &per_cpu(recycle_list, cpu);
+		skbuff_debugobj_print_skb_list(h->next, "Recycle List");
+	}
+	local_irq_restore(flags);
+	preempt_enable();
+}
--- a/net/core/skbuff_recycle.h
+++ b/net/core/skbuff_recycle.h
@@ -151,9 +151,11 @@ static inline bool consume_skb_can_recyc
 void __init skb_recycler_init(void);
 struct sk_buff *skb_recycler_alloc(struct net_device *dev, unsigned int length);
 bool skb_recycler_consume(struct sk_buff *skb);
+void skb_recycler_print_all_lists(void);
 #else
 #define skb_recycler_init()  {}
 #define skb_recycler_alloc(dev, len) NULL
 #define skb_recycler_consume(skb) false
+#define skb_recycler_print_all_lists() false
 #endif
 #endif
