From 42200bed53f6f05028b58eeca1d4e765f2bae3c6 Mon Sep 17 00:00:00 2001
From: Tian Yang <tiany@codeaurora.org>
Date: Wed, 16 Dec 2020 17:01:15 -0800
Subject: [PATCH] skb_debug: Fix the print skb list function

Each core should print its own skb list. Also this patch simplified
the skb print list by not printing skbs whose check sum is correct.

Signed-off-by: Tian Yang <tiany@codeaurora.org>
Change-Id: I7eeb3fb341f7c051cfd201af7e9e673baed0a9d1
---
 net/core/skbuff_debug.c   | 14 ++++++++------
 net/core/skbuff_recycle.c | 19 +++++++++----------
 2 files changed, 17 insertions(+), 16 deletions(-)

--- a/net/core/skbuff_debug.c
+++ b/net/core/skbuff_debug.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-2016, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2015-2016, 2020 The Linux Foundation. All rights reserved.
  *
  * Permission to use, copy, modify, and/or distribute this software for any
  * purpose with or without fee is hereby granted, provided that the above
@@ -290,15 +290,17 @@ void skbuff_debugobj_print_skb_list(cons
 				sum_i = 0;
 				sum_now = 0;
 			}
-			pr_emerg("skb_debug: [%02d] skb 0x%p, next 0x%p, prev 0x%p, state %d (%s), sum %d (now %d)\n",
-				 count, skb_i, skb_i->next, skb_i->prev,
-				 obj_state, skbuff_debugobj_state_name(skb_i),
-				 sum_i, sum_now);
+			if (sum_i != sum_now) {
+				pr_emerg("skb_debug: [%02d] skb 0x%p, next 0x%p, prev 0x%p, state %d (%s), sum %d (now %d)\n",
+					 count, skb_i, skb_i->next, skb_i->prev,
+					 obj_state, skbuff_debugobj_state_name(skb_i),
+					 sum_i, sum_now);
+			}
 			skb_i = skb_i->next;
 			count++;
 		} while (skb_list != skb_i);
 	}
-	pr_emerg("skb_debug: end skb list '%s'\n", list_title);
+	pr_emerg("skb_debug: end skb list '%s'. In total %d skbs iterated.\n", list_title, count);
 }
 
 void skbuff_debugobj_register_callback(void)
--- a/net/core/skbuff_recycle.c
+++ b/net/core/skbuff_recycle.c
@@ -539,11 +539,14 @@ void __init skb_recycler_init(void)
 
 void skb_recycler_print_all_lists(void)
 {
+
 	unsigned long flags;
 	int cpu;
 #ifdef CONFIG_SKB_RECYCLER_MULTI_CPU
 	int i;
+	struct sk_buff_head *h;
 
+	cpu = get_cpu();
 	spin_lock_irqsave(&glob_recycler.lock, flags);
 	for (i = 0; i < SKB_RECYCLE_MAX_SHARED_POOLS; i++)
 		skbuff_debugobj_print_skb_list((&glob_recycler.pool[i])->next,
@@ -552,24 +555,20 @@ void skb_recycler_print_all_lists(void)
 
 	preempt_disable();
 	local_irq_save(flags);
-	for_each_possible_cpu(cpu) {
-		struct sk_buff_head *h;
 
-		h = &per_cpu(recycle_spare_list, cpu);
-		skbuff_debugobj_print_skb_list(h->next, "Recycle Spare", cpu);
-	}
+	h = &per_cpu(recycle_spare_list, cpu);
+	skbuff_debugobj_print_skb_list(h->next, "Recycle Spare", cpu);
+
 	local_irq_restore(flags);
 	preempt_enable();
 #endif
 
 	preempt_disable();
 	local_irq_save(flags);
-	for_each_possible_cpu(cpu) {
-		struct sk_buff_head *h;
+	h = &per_cpu(recycle_list, cpu);
+	skbuff_debugobj_print_skb_list(h->next, "Recycle List", cpu);
 
-		h = &per_cpu(recycle_list, cpu);
-		skbuff_debugobj_print_skb_list(h->next, "Recycle List", cpu);
-	}
 	local_irq_restore(flags);
 	preempt_enable();
+
 }
