From a0564bcfbf1cc1124d6d30df58c781f7314979f2 Mon Sep 17 00:00:00 2001
From: Suruchi Agarwal <suruchia@codeaurora.org>
Date: Wed, 12 Jul 2017 10:54:04 -0700
Subject: [PATCH] uapi: add accel_mode support for NSS qdisc

This shows users where a particular qdisc is getting accelerated
and also provides them the ability to specify the accel_mode when
creating qdiscs.

Change-Id: Icbe9b1f67fe68a2be88a17a844fb0e97f492ed57
Signed-off-by: Suruchi Agarwal <suruchia@codeaurora.org>
---
 include/uapi/linux/pkt_sched.h | 69 +++++++++++++++++++++++-----------
 1 file changed, 47 insertions(+), 22 deletions(-)

--- a/include/uapi/linux/pkt_sched.h
+++ b/include/uapi/linux/pkt_sched.h
@@ -119,6 +119,12 @@ enum {
 
 #define TCA_STAB_MAX (__TCA_STAB_MAX - 1)
 
+enum {
+	TCA_NSS_ACCEL_MODE_NSS_FW,
+	TCA_NSS_ACCEL_MODE_PPE,
+	TCA_NSS_ACCEL_MODE_MAX
+};
+
 /* NSSFIFO section */
 
 enum {
@@ -130,8 +136,9 @@ enum {
 #define TCA_NSSFIFO_MAX	(__TCA_NSSFIFO_MAX - 1)
 
 struct tc_nssfifo_qopt {
-	__u32	limit;	/* Queue length: bytes for bfifo, packets for pfifo */
-	__u8	set_default;/* Sets qdisc to be the default qdisc for enqueue */
+	__u32	limit;		/* Queue length: bytes for bfifo, packets for pfifo */
+	__u8	set_default;	/* Sets qdisc to be the default qdisc for enqueue */
+	__u8	accel_mode;	/* Dictates which data plane offloads the qdisc */
 };
 
 /* NSSWRED section */
@@ -167,16 +174,18 @@ enum tc_nsswred_weight_modes {
 
 struct tc_nsswred_qopt {
 	__u32	limit;			/* Queue length */
-	enum tc_nsswred_weight_modes weight_mode;	/* Weight mode */
-	__u32	traffic_classes;/* How many traffic classes: DPs */
-	__u32	def_traffic_class;/* Default traffic if no match: def_DP */
-	__u32	traffic_id;/* The traffic id to be configured: DP */
-	__u32	weight_mode_value;/* Weight mode value */
-	struct tc_red_alg_parameter rap;	/* RED algorithm parameters */
+	enum tc_nsswred_weight_modes weight_mode;
+					/* Weight mode */
+	__u32	traffic_classes;	/* How many traffic classes: DPs */
+	__u32	def_traffic_class;	/* Default traffic if no match: def_DP */
+	__u32	traffic_id;		/* The traffic id to be configured: DP */
+	__u32	weight_mode_value;	/* Weight mode value */
+	struct tc_red_alg_parameter rap;/* RED algorithm parameters */
 	struct tc_nsswred_traffic_class tntc[NSSWRED_CLASS_MAX];
 					/* Traffic settings for dumpping */
-	__u8	ecn;		/* Setting ECN bit or dropping */
-	__u8	set_default;	/* Sets qdisc to be the default for enqueue */
+	__u8	ecn;			/* Setting ECN bit or dropping */
+	__u8	set_default;		/* Sets qdisc to be the default for enqueue */
+	__u8	accel_mode;		/* Dictates which data plane offloads the qdisc */
 };
 
 /* NSSCODEL section */
@@ -190,15 +199,16 @@ enum {
 #define TCA_NSSCODEL_MAX	(__TCA_NSSCODEL_MAX - 1)
 
 struct tc_nsscodel_qopt {
-	__u32	target;/* Acceptable queueing delay */
-	__u32	limit;/* Max number of packets that can be held in the queue */
-	__u32	interval;/* Monitoring interval */
-	__u8	set_default;/* Sets qdisc to be the default qdisc for enqueue */
+	__u32	target;		/* Acceptable queueing delay */
+	__u32	limit;		/* Max number of packets that can be held in the queue */
+	__u32	interval;	/* Monitoring interval */
+	__u8	set_default;	/* Sets qdisc to be the default qdisc for enqueue */
+	__u8	accel_mode;	/* Dictates which data plane offloads the qdisc */
 };
 
 struct tc_nsscodel_xstats {
-	__u32 peak_queue_delay;/* Peak delay experienced by a dequeued packet */
-	__u32 peak_drop_delay;/* Peak delay experienced by a dropped packet */
+	__u32 peak_queue_delay;	/* Peak delay experienced by a dequeued packet */
+	__u32 peak_drop_delay;	/* Peak delay experienced by a dropped packet */
 };
 
 /* NSSTBL section */
@@ -212,10 +222,11 @@ enum {
 #define TCA_NSSTBL_MAX	(__TCA_NSSTBL_MAX - 1)
 
 struct tc_nsstbl_qopt {
-	__u32	burst;	/* Maximum burst size */
-	__u32	rate;	/* Limiting rate of TBF */
-	__u32	peakrate;/* Maximum rate at which TBF is allowed to send */
-	__u32	mtu;	/* Max size of packet, or minumim burst size */
+	__u32	burst;		/* Maximum burst size */
+	__u32	rate;		/* Limiting rate of TBF */
+	__u32	peakrate;	/* Maximum rate at which TBF is allowed to send */
+	__u32	mtu;		/* Max size of packet, or minumim burst size */
+	__u8	accel_mode;	/* Dictates which data plane offloads the qdisc */
 };
 
 /* NSSPRIO section */
@@ -231,7 +242,8 @@ enum {
 #define TCA_NSSPRIO_MAX	(__TCA_NSSPRIO_MAX - 1)
 
 struct tc_nssprio_qopt {
-	int	bands;				/* Number of bands */
+	__u32	bands;		/* Number of bands */
+	__u8	accel_mode;	/* Dictates which data plane offloads the qdisc */
 };
 
 /* NSSBF section */
@@ -254,6 +266,7 @@ struct tc_nssbf_class_qopt {
 
 struct tc_nssbf_qopt {
 	__u16	defcls;		/* Default class value */
+	__u8	accel_mode;	/* Dictates which data plane offloads the qdisc */
 };
 
 /* NSSWRR section */
@@ -261,6 +274,7 @@ struct tc_nssbf_qopt {
 enum {
 	TCA_NSSWRR_UNSPEC,
 	TCA_NSSWRR_CLASS_PARMS,
+	TCA_NSSWRR_QDISC_PARMS,
 	__TCA_NSSWRR_MAX
 };
 
@@ -270,11 +284,16 @@ struct tc_nsswrr_class_qopt {
 	__u32	quantum;	/* Weight associated to this class */
 };
 
+struct tc_nsswrr_qopt {
+	__u8	accel_mode;	/* Dictates which data plane offloads the qdisc */
+};
+
 /* NSSWFQ section */
 
 enum {
 	TCA_NSSWFQ_UNSPEC,
 	TCA_NSSWFQ_CLASS_PARMS,
+	TCA_NSSWFQ_QDISC_PARMS,
 	__TCA_NSSWFQ_MAX
 };
 
@@ -284,6 +303,10 @@ struct tc_nsswfq_class_qopt {
 	__u32	quantum;	/* Weight associated to this class */
 };
 
+struct tc_nsswfq_qopt {
+	__u8	accel_mode;	/* Dictates which data plane offloads the qdisc */
+};
+
 /* NSSHTB section */
 
 enum {
@@ -307,6 +330,7 @@ struct tc_nsshtb_class_qopt {
 
 struct tc_nsshtb_qopt {
 	__u32	r2q;		/* Rate to quantum ratio */
+	__u8	accel_mode;	/* Dictates which data plane offloads the qdisc */
 };
 
 /* NSSBLACKHOLE section */
@@ -320,7 +344,8 @@ enum {
 #define TCA_NSSBLACKHOLE_MAX	(__TCA_NSSBLACKHOLE_MAX - 1)
 
 struct tc_nssblackhole_qopt {
-	__u8	set_default;/* Sets qdisc to be the default qdisc for enqueue */
+	__u8	set_default;	/* Sets qdisc to be the default qdisc for enqueue */
+	__u8	accel_mode;	/* Dictates which data plane offloads the qdisc */
 };
 
 /* FIFO section */
