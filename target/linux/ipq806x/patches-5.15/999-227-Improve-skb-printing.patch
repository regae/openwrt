From 022aecb33ea177058984a0216fff097e3857dd51 Mon Sep 17 00:00:00 2001
From: Tian Yang <tiany@codeaurora.org>
Date: Fri, 28 Oct 2016 01:26:22 -0500
Subject: [PATCH] Improve skb printing

Export skb pretty printing function.
Print skb current state in addition to already printed info.
Minor fixes to text clarity.

Change-Id: Ic629de74532dd774e12e9314d7b3652d06d07aa5
Signed-off-by: Cristian Prundeanu <cprundea@codeaurora.org>
Signed-off-by: Casey Chen <kexinc@codeaurora.org>
---
 net/core/skbuff_debug.c | 44 ++++++++++++++++++++++++++++++++---------
 net/core/skbuff_debug.h |  2 ++
 2 files changed, 37 insertions(+), 9 deletions(-)

--- a/net/core/skbuff_debug.c
+++ b/net/core/skbuff_debug.c
@@ -80,7 +80,7 @@ static void skbuff_debugobj_get_stack(vo
 }
 #endif
 
-void skbuff_debugobj_print_stack(void **stack)
+void skbuff_debugobj_print_stack(void *const *stack)
 {
 	int i;
 
@@ -88,15 +88,41 @@ void skbuff_debugobj_print_stack(void **
 		pr_emerg("\t %pS (0x%p)\n", stack[i], stack[i]);
 }
 
-void skbuff_debugobj_print_skb(struct sk_buff *skb)
+static const char *skbuff_debugobj_state_name(const struct sk_buff *skb)
+{
+	int obj_state;
+
+	obj_state = debug_object_get_state((struct sk_buff *)skb);
+	switch (obj_state) {
+	case ODEBUG_STATE_NONE:
+		return "none";
+	case ODEBUG_STATE_INIT:
+		return "init";
+	case ODEBUG_STATE_INACTIVE:
+		return "inactive";
+	case ODEBUG_STATE_ACTIVE:
+		return "active";
+	case ODEBUG_STATE_DESTROYED:
+		return "destroyed";
+	case ODEBUG_STATE_NOTAVAILABLE:
+		return "not available";
+	default:
+		return "invalid";
+	}
+}
+
+void skbuff_debugobj_print_skb(const struct sk_buff *skb)
 {
 	pr_emerg("skb_debug: current process = %s (pid %i)\n",
 		 current->comm, current->pid);
-	pr_emerg("skbuff_debug: free stack:\n");
+	pr_emerg("skb_debug: skb 0x%p, next 0x%p, prev 0x%p, state = %s\n", skb,
+		 skb->next, skb->prev, skbuff_debugobj_state_name(skb));
+	pr_emerg("skb_debug: free stack:\n");
 	skbuff_debugobj_print_stack(skb->free_addr);
-	pr_emerg("skbuff_debug: alloc stack:\n");
+	pr_emerg("skb_debug: alloc stack:\n");
 	skbuff_debugobj_print_stack(skb->alloc_addr);
 }
+EXPORT_SYMBOL(skbuff_debugobj_print_skb);
 
 /* skbuff_debugobj_fixup():
  *	Called when an error is detected in the state machine for
@@ -110,7 +136,7 @@ static int skbuff_debugobj_fixup(void *a
 {
 	struct sk_buff *skb = (struct sk_buff *)addr;
 	ftrace_dump(DUMP_ALL);
-	WARN(1, "skbuff_debug: state = %d, skb = 0x%p sum = %d (%d)\n",
+	WARN(1, "skb_debug: state = %d, skb = 0x%p sum = %d (now %d)\n",
 	     state, skb, skb->sum, skbuff_debugobj_sum(skb));
 	skbuff_debugobj_print_skb(skb);
 	skb_recycler_notifier_send_event(SKB_RECYCLER_NOTIFIER_FSM, skb);
@@ -148,7 +174,7 @@ inline void skbuff_debugobj_activate(str
 
 err_act:
 	ftrace_dump(DUMP_ALL);
-	WARN(1, "skb_debug: failed to activate err = %d skb = 0x%p sum = %d (%d)\n",
+	WARN(1, "skb_debug: failed to activate err = %d skb = 0x%p sum = %d (now %d)\n",
 	     ret, skb, skb->sum, skbuff_debugobj_sum(skb));
 	skbuff_debugobj_print_skb(skb);
 	skb_recycler_notifier_send_event(SKB_RECYCLER_NOTIFIER_DBLALLOC, skb);
@@ -186,7 +212,7 @@ inline void skbuff_debugobj_deactivate(s
 	}
 
 	ftrace_dump(DUMP_ALL);
-	WARN(1, "skbuff_debug: deactivating inactive object skb=0x%p state=%d sum = %d (%d)\n",
+	WARN(1, "skb_debug: deactivating inactive object skb=0x%p state=%d sum = %d (now %d)\n",
 	     skb, obj_state, skb->sum, skbuff_debugobj_sum(skb));
 	skbuff_debugobj_print_skb(skb);
 	skb_recycler_notifier_send_event(SKB_RECYCLER_NOTIFIER_DBLFREE, skb);
@@ -201,7 +227,7 @@ inline void skbuff_debugobj_sum_validate
 		return;
 
 	ftrace_dump(DUMP_ALL);
-	WARN(1, "skb_debug: skb changed while deactive skb = 0x%p sum = %d (%d)\n",
+	WARN(1, "skb_debug: skb sum changed skb = 0x%p sum = %d (now %d)\n",
 	     skb, skb->sum, skbuff_debugobj_sum(skb));
 	skbuff_debugobj_print_skb(skb);
 	skb_recycler_notifier_send_event(SKB_RECYCLER_NOTIFIER_SUMERR, skb);
@@ -227,7 +253,7 @@ static int __init disable_object_debug(c
 {
 	skbuff_debugobj_enabled = 0;
 
-	pr_info("skbuff_debug: debug objects is disabled\n");
+	pr_info("skb_debug: debug objects is disabled\n");
 	return 0;
 }
 
--- a/net/core/skbuff_debug.h
+++ b/net/core/skbuff_debug.h
@@ -27,6 +27,7 @@ void skbuff_debugobj_deactivate(struct s
 void skbuff_debugobj_destroy(struct sk_buff *skb);
 void skbuff_debugobj_sum_validate(struct sk_buff *skb);
 void skbuff_debugobj_sum_update(struct sk_buff *skb);
+void skbuff_debugobj_print_skb(const struct sk_buff *skb);
 #else
 static inline void skbuff_debugobj_init_and_activate(struct sk_buff *skb) { }
 static inline void skbuff_debugobj_activate(struct sk_buff *skb) { }
@@ -34,6 +35,7 @@ static inline void skbuff_debugobj_deact
 static inline void skbuff_debugobj_destroy(struct sk_buff *skb) { }
 static inline void skbuff_debugobj_sum_validate(struct sk_buff *skb) { }
 static inline void skbuff_debugobj_sum_update(struct sk_buff *skb) { }
+static inline void skbuff_debugobj_print_skb(const struct sk_buff *skb) { }
 #endif
 
 #endif /* _LINUX_SKBBUFF_DEBUG_OBJECTS */
