From 999e0a6c7bfcf574ad5408a8401885304d26a447 Mon Sep 17 00:00:00 2001
From: Tian Yang <tiany@codeaurora.org>
Date: Tue, 29 Dec 2015 15:20:54 -0600
Subject: [PATCH] skbuff_debug: track sum of skb while not in use

Add a simple sum check across the range of the SKB struct
to see if something else modified after it was freed to the
SKB recycler.

Right now, we just check for the SKB recycler as freeing to
the slab tends to let other changes to the struct occur.

Change-Id: I41b4163bf735cc047dd7150cb009098665c9b94e
Signed-off-by: Matthew McClintock <mmcclint@codeaurora.org>
Signed-off-by: Casey Chen <kexinc@codeaurora.org>
---
 include/linux/skbuff.h  |  1 +
 net/core/skbuff_debug.c | 35 ++++++++++++++++++++++++++++-------
 2 files changed, 29 insertions(+), 7 deletions(-)

--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -990,6 +990,7 @@ struct sk_buff {
 #define DEBUG_OBJECTS_SKBUFF_STACKSIZE	20
 	void			*free_addr[DEBUG_OBJECTS_SKBUFF_STACKSIZE];
 	void			*alloc_addr[DEBUG_OBJECTS_SKBUFF_STACKSIZE];
+	u32			sum;
 #endif
 };
 
--- a/net/core/skbuff_debug.c
+++ b/net/core/skbuff_debug.c
@@ -23,6 +23,17 @@
 
 static int skbuff_debugobj_enabled __read_mostly = 1;
 
+inline u32 skbuff_debugobj_sum(struct sk_buff *skb)
+{
+	int pos = offsetof(struct sk_buff, free_addr);
+	u32 sum = 0;
+
+	while (pos--)
+		sum += ((u8 *)skb)[pos];
+
+	return sum;
+}
+
 struct skbuff_debugobj_walking {
 	int pos;
 	void **d;
@@ -98,8 +109,8 @@ static int skbuff_debugobj_fixup(void *a
 {
 	struct sk_buff *skb = (struct sk_buff *)addr;
 	ftrace_dump(DUMP_ALL);
-	WARN(1, "skbuff_debug: state = %d, skb = 0x%p\n",
-	     state, skb);
+	WARN(1, "skbuff_debug: state = %d, skb = 0x%p sum = %d (%d)\n",
+	     state, skb, skb->sum, skbuff_debugobj_sum(skb));
 	skbuff_debugobj_print_skb(skb);
 
 #ifdef CONFIG_ARM64
@@ -129,12 +140,15 @@ inline void skbuff_debugobj_activate(str
 	if (ret)
 		goto err_act;
 
-	return;
+	if (skb->sum == skbuff_debugobj_sum(skb))
+		return;
+
+	pr_emerg("skb_debug: skb changed while deactive\n");
 
 err_act:
 	ftrace_dump(DUMP_ALL);
-	WARN(1, "skb_debug: failed to activate err = %d skb = 0x%p\n",
-	     ret, skb);
+	WARN(1, "skb_debug: failed to activate err = %d skb = 0x%p sum = %d (%d)\n",
+	     ret, skb, skb->sum, skbuff_debugobj_sum(skb));
 	skbuff_debugobj_print_skb(skb);
 }
 
@@ -143,6 +157,11 @@ inline void skbuff_debugobj_init_and_act
 	if (!skbuff_debugobj_enabled)
 		return;
 
+	/* if we're coming from the slab, the skb->sum might
+	 * be invalid anyways
+	 */
+	skb->sum = skbuff_debugobj_sum(skb);
+
 	debug_object_init(skb, &skbuff_debug_descr);
 	skbuff_debugobj_activate(skb);
 }
@@ -154,6 +173,8 @@ inline void skbuff_debugobj_deactivate(s
 	if (!skbuff_debugobj_enabled)
 		return;
 
+	skb->sum = skbuff_debugobj_sum(skb);
+
 	obj_state = debug_object_get_state(skb);
 
 	skbuff_debugobj_get_stack(skb->free_addr);
@@ -163,8 +184,8 @@ inline void skbuff_debugobj_deactivate(s
 	}
 
 	ftrace_dump(DUMP_ALL);
-	WARN(1, "skbuff_debug: deactivating inactive object skb=0x%p state=%d\n",
-	     skb, obj_state);
+	WARN(1, "skbuff_debug: deactivating inactive object skb=0x%p state=%d sum = %d (%d)\n",
+	     skb, obj_state, skb->sum, skbuff_debugobj_sum(skb));
 	skbuff_debugobj_print_skb(skb);
 }
 
