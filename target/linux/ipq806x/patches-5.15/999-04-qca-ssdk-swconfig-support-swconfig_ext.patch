From a9007bd1507b01c418d3b66eeb10100a4d01cb54 Mon Sep 17 00:00:00 2001
From: xiaofeis <xiaofeis@codeaurora.org>
Date: Thu, 26 Mar 2020 21:12:29 +0800
Subject: [PATCH] net: phy: swconfig: support swconfig_ext on kernel v5.4

Change-Id: I79223fdd68b2346949d5329549f0419a5450aa03
Signed-off-by: xiaofeis <xiaofeis@codeaurora.org>
---
 drivers/net/phy/swconfig.c  | 71 +++++++++++++++++++++++++++++++++++++
 include/linux/switch.h      | 10 ++++++
 include/uapi/linux/switch.h | 12 +++++++
 3 files changed, 93 insertions(+)

--- a/drivers/net/phy/swconfig.c
+++ b/drivers/net/phy/swconfig.c
@@ -279,6 +279,7 @@ static const struct nla_policy switch_po
 	[SWITCH_ATTR_OP_VALUE_INT] = { .type = NLA_U32 },
 	[SWITCH_ATTR_OP_VALUE_STR] = { .type = NLA_NUL_STRING },
 	[SWITCH_ATTR_OP_VALUE_PORTS] = { .type = NLA_NESTED },
+	[SWITCH_ATTR_OP_VALUE_EXT] = { .type = NLA_NESTED },
 	[SWITCH_ATTR_TYPE] = { .type = NLA_U32 },
 };
 
@@ -293,6 +294,11 @@ static struct nla_policy link_policy[SWI
 	[SWITCH_LINK_SPEED] = { .type = NLA_U32 },
 };
 
+static const struct nla_policy ext_policy[SWITCH_EXT_ATTR_MAX+1] = {
+	[SWITCH_EXT_NAME] = { .type = NLA_NUL_STRING },
+	[SWITCH_EXT_VALUE] = { .type = NLA_NUL_STRING },
+};
+
 static inline void
 swconfig_lock(void)
 {
@@ -608,6 +614,47 @@ swconfig_parse_ports(struct sk_buff *msg
 }
 
 static int
+swconfig_parse_ext(struct sk_buff *msg, struct nlattr *head,
+		struct switch_val *val, int max)
+{
+	struct nlattr *nla;
+	struct switch_ext *switch_ext_p, *switch_ext_tmp;
+	int rem;
+
+	val->len = 0;
+	switch_ext_p = val->value.ext_val;
+	nla_for_each_nested(nla, head, rem) {
+		struct nlattr *tb[SWITCH_EXT_ATTR_MAX+1];
+
+		switch_ext_tmp = kzalloc(sizeof(struct switch_ext), GFP_KERNEL);
+		if (!switch_ext_tmp)
+			return -ENOMEM;
+
+		if (nla_parse_nested_deprecated(tb, SWITCH_EXT_ATTR_MAX, nla,
+				ext_policy, NULL))
+			return -EINVAL;
+
+		if (!tb[SWITCH_EXT_NAME])
+			return -EINVAL;
+		switch_ext_tmp->option_name = nla_data(tb[SWITCH_EXT_NAME]);
+
+		if (!tb[SWITCH_EXT_VALUE])
+			return -EINVAL;
+		switch_ext_tmp->option_value = nla_data(tb[SWITCH_EXT_VALUE]);
+
+		if(!switch_ext_p)
+			val->value.ext_val = switch_ext_tmp;
+		else
+			switch_ext_p->next = switch_ext_tmp;
+		switch_ext_p=switch_ext_tmp;
+
+		val->len++;
+	}
+
+	return 0;
+}
+
+static int
 swconfig_parse_link(struct sk_buff *msg, struct nlattr *nla,
 		    struct switch_port_link *link)
 {
@@ -629,6 +676,7 @@ swconfig_set_attr(struct sk_buff *skb, s
 	const struct switch_attr *attr;
 	struct switch_dev *dev;
 	struct switch_val val;
+	struct switch_ext *switch_ext_p;
 	int err = -EINVAL;
 
 	if (!capable(CAP_NET_ADMIN))
@@ -691,12 +739,35 @@ swconfig_set_attr(struct sk_buff *skb, s
 			err = 0;
 		}
 		break;
+	case SWITCH_TYPE_EXT:
+		if (info->attrs[SWITCH_ATTR_OP_VALUE_EXT]) {
+			err = swconfig_parse_ext(skb,
+				info->attrs[SWITCH_ATTR_OP_VALUE_EXT], &val, dev->ports);
+			if (err < 0)
+				goto error;
+		} else {
+			val.len = 0;
+			err = 0;
+		}
+		break;
 	default:
 		goto error;
 	}
 
 	err = attr->set(dev, attr, &val);
 error:
+	/* free memory if necessary */
+	if(attr) {
+		switch(attr->type) {
+		case SWITCH_TYPE_EXT:
+			switch_ext_p = val.value.ext_val;
+			while(switch_ext_p) {
+				struct switch_ext *ext_value_p = switch_ext_p;
+				switch_ext_p = switch_ext_p->next;
+				kfree(ext_value_p);
+			}
+		}
+	}
 	swconfig_put_dev(dev);
 	return err;
 }
@@ -1213,6 +1284,10 @@ switch_generic_set_link(struct switch_de
 		case SWITCH_PORT_SPEED_1000:
 			bmcr |= BMCR_SPEED1000;
 			break;
+		case SWITCH_PORT_SPEED_2500:
+		case SWITCH_PORT_SPEED_5000:
+		case SWITCH_PORT_SPEED_10000:
+			return -ENOTSUPP;
 		default:
 			return -ENOTSUPP;
 		}
--- a/drivers/net/phy/swconfig_leds.c
+++ b/drivers/net/phy/swconfig_leds.c
@@ -478,6 +478,12 @@ swconfig_led_work_func(struct work_struc
 					sw_trig->link_speed[i] =
 						SWCONFIG_LED_PORT_SPEED_1000;
 					break;
+				case SWITCH_PORT_SPEED_2500:
+				case SWITCH_PORT_SPEED_5000:
+				case SWITCH_PORT_SPEED_10000:
+					sw_trig->link_speed[i] =
+						SWCONFIG_LED_PORT_SPEED_NA;
+					break;
 				}
 			}
 		}
--- a/include/linux/switch.h
+++ b/include/linux/switch.h
@@ -45,6 +45,9 @@ enum switch_port_speed {
 	SWITCH_PORT_SPEED_10 = 10,
 	SWITCH_PORT_SPEED_100 = 100,
 	SWITCH_PORT_SPEED_1000 = 1000,
+	SWITCH_PORT_SPEED_2500 = 2500,
+	SWITCH_PORT_SPEED_5000 = 5000,
+	SWITCH_PORT_SPEED_10000 = 10000
 };
 
 struct switch_port_link {
@@ -146,6 +149,12 @@ struct switch_portmap {
 	const char *s;
 };
 
+struct switch_ext {
+	const char *option_name;
+	const char *option_value;
+	struct switch_ext *next;
+};
+
 struct switch_val {
 	const struct switch_attr *attr;
 	unsigned int port_vlan;
@@ -155,6 +164,7 @@ struct switch_val {
 		u32 i;
 		struct switch_port *ports;
 		struct switch_port_link *link;
+		struct switch_ext *ext_val;
 	} value;
 };
 
--- a/include/uapi/linux/switch.h
+++ b/include/uapi/linux/switch.h
@@ -51,9 +51,12 @@ enum {
 	SWITCH_ATTR_OP_VALUE_STR,
 	SWITCH_ATTR_OP_VALUE_PORTS,
 	SWITCH_ATTR_OP_VALUE_LINK,
+	SWITCH_ATTR_OP_VALUE_EXT,
 	SWITCH_ATTR_OP_DESCRIPTION,
 	/* port lists */
 	SWITCH_ATTR_PORT,
+	/* switch_ext attribute */
+	SWITCH_ATTR_EXT,
 	SWITCH_ATTR_MAX
 };
 
@@ -88,6 +91,7 @@ enum switch_val_type {
 	SWITCH_TYPE_STRING,
 	SWITCH_TYPE_PORTS,
 	SWITCH_TYPE_LINK,
+	SWITCH_TYPE_EXT,
 	SWITCH_TYPE_NOVAL,
 };
 
@@ -113,6 +117,14 @@ enum {
 	SWITCH_LINK_ATTR_MAX,
 };
 
+/* switch_ext nested attributes */
+enum {
+	SWITCH_EXT_UNSPEC,
+	SWITCH_EXT_NAME,
+	SWITCH_EXT_VALUE,
+	SWITCH_EXT_ATTR_MAX
+};
+
 #define SWITCH_ATTR_DEFAULTS_OFFSET	0x1000
 
 
