From 8e440ceb39aa99161d54a82dcdc313d9bf554d90 Mon Sep 17 00:00:00 2001
From: Tian Yang <tiany@codeaurora.org>
Date: Mon, 12 Oct 2015 15:28:25 -0500
Subject: [PATCH] skbuff_debug: add cmdline param to disable
 skbuff_debug_objects

If you add no_skbuff_debug_objects to the kernel parameters
the skbuff debug objects feature will be runtime disabled and
it should help simulate an environment where the feature is
completely turned off via the kernel configuration.

You will also get a message at boot, as well as be able to see
the parameter via the cmdline

[    0.000000] Booting Linux on physical CPU 0
[    0.000000] Linux version 3.4.103 (mmcclint@mmcclint-ubuntu) (gcc version 4.6.3 20120201 (prerelease) (Linaro GCC 4.6-2012.02) ) #4 SMP PREEMPT Mon Oct 12 15:21:37 CDT 2015
[    0.000000] CPU: ARMv7 Processor [512f04d0] revision 0 (ARMv7), cr=10c5387d
[    0.000000] CPU: PIPT / VIPT nonaliasing data cache, PIPT instruction cache
[    0.000000] Machine: Qualcomm xxxx(hided) AP148 reference board
[    0.000000] skbuff_debug: debug objects is disabled
[    0.000000] msm_reserve_memory: 0x44000000, 0x600000
[    0.000000] msm_reserve_memory: 0x44600000, 0x200000
[    0.000000] memory pool 3 (start 5fc00000 size 400000) initialized
[    0.000000] Memory policy: ECC disabled, Data cache writealloc
[    0.000000] smem_find(137, 80): wrong size 72
[    0.000000] socinfo_init: v6, id=204, ver=2.0, raw_id=2313, raw_ver=2313, hw_plat=0,  hw_plat_ver=65536
[    0.000000]  accessory_chip=0 hw_plat_subtype=0
[    0.000000] PERCPU: Embedded 8 pages/cpu @c0c88000 s10624 r8192 d13952 u32768
[    0.000000] Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 121642
[    0.000000] Kernel command line: no_skbuff_debug_objects console=ttyHSL1,115200n8 ubi.mtd=rootfs root=mtd:ubi_rootfs rootfstype=squashfs
[    0.000000] PID hash table entries: 2048 (order: 1, 8192 bytes)

Change-Id: I08879b2b68fe00d2ba7eb0d0285950da013afd39
Signed-off-by: Matthew McClintock <mmcclint@codeaurora.org>
Signed-off-by: Casey Chen <kexinc@codeaurora.org>
---
 net/core/skbuff_debug.c | 32 ++++++++++++++++++++++++++++++--
 1 file changed, 30 insertions(+), 2 deletions(-)

--- a/net/core/skbuff_debug.c
+++ b/net/core/skbuff_debug.c
@@ -16,6 +16,8 @@
 
 #include "skbuff_debug.h"
 
+static int skbuff_debugobj_enabled __read_mostly = 1;
+
 /* skbuff_debugobj_fixup():
  *	Called when an error is detected in the state machine for
  *	the objects
@@ -45,7 +47,12 @@ static struct debug_obj_descr skbuff_deb
 
 inline void skbuff_debugobj_activate(struct sk_buff *skb)
 {
-	int ret = debug_object_activate(skb, &skbuff_debug_descr);
+	int ret;
+
+	if (!skbuff_debugobj_enabled)
+		return;
+
+	ret = debug_object_activate(skb, &skbuff_debug_descr);
 
 	if (ret) {
 		ftrace_dump(DUMP_ALL);
@@ -56,13 +63,21 @@ inline void skbuff_debugobj_activate(str
 
 inline void skbuff_debugobj_init_and_activate(struct sk_buff *skb)
 {
+	if (!skbuff_debugobj_enabled)
+		return;
+
 	debug_object_init(skb, &skbuff_debug_descr);
 	skbuff_debugobj_activate(skb);
 }
 
 inline void skbuff_debugobj_deactivate(struct sk_buff *skb)
 {
-	int obj_state = debug_object_get_state(skb);
+	int obj_state;
+
+	if (!skbuff_debugobj_enabled)
+		return;
+
+	obj_state = debug_object_get_state(skb);
 
 	if (obj_state == ODEBUG_STATE_ACTIVE) {
 		debug_object_deactivate(skb, &skbuff_debug_descr);
@@ -76,5 +91,18 @@ inline void skbuff_debugobj_deactivate(s
 
 inline void skbuff_debugobj_destroy(struct sk_buff *skb)
 {
+	if (!skbuff_debugobj_enabled)
+		return;
+
 	debug_object_destroy(skb, &skbuff_debug_descr);
 }
+
+static int __init disable_object_debug(char *str)
+{
+	skbuff_debugobj_enabled = 0;
+
+	pr_info("skbuff_debug: debug objects is disabled\n");
+	return 0;
+}
+
+early_param("no_skbuff_debug_objects", disable_object_debug);
