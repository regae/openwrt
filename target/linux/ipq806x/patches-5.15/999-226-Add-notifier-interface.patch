From 239b6024c371d107a5df86ee638e94a6f4cd70f3 Mon Sep 17 00:00:00 2001
From: Tian Yang <tiany@codeaurora.org>
Date: Thu, 27 Oct 2016 11:46:24 -0500
Subject: [PATCH] Add notifier interface

Add a notifier interface for the SKB recycler. This notifier will
propagate events related to skb problems (double free, double alloc,
checksum mismatch).

The following change is merged together:

	Don't call BUG_ON in the notifier

	The notifier was meant to be terminal, i.e. after propagating the
	event it stops the system.
	This is causing confusion however, under the assumption that there is
	an actual problem in the notifier code.

	This commit removes the BUG_ON call in the notifier, so that the event
	originator gets to stop the system (as it was done before the notifier
	was introduced).

	Change Id: I5a7af0374dc4991539d742712331de03aa3833d1
	Author and Committer: Cristian Prundeanu <cprundea@codeaurora.org>

Change-Id: I35262581ad964ef97d21946a965170531ca9034f
Signed-off-by: Cristian Prundeanu <cprundea@codeaurora.org>
Signed-off-by: Casey Chen <kexinc@codeaurora.org>
Signed-off-by: Tian Yang <tiany@codeaurora.org>
---
 MAINTAINERS                  |  1 +
 include/linux/debugobjects.h |  2 ++
 lib/debugobjects.c           | 23 ++++++++++++++++
 net/core/Makefile            |  2 +-
 net/core/skbuff_debug.c      |  5 ++++
 net/core/skbuff_notifier.c   | 42 +++++++++++++++++++++++++++++
 net/core/skbuff_notifier.h   | 52 ++++++++++++++++++++++++++++++++++++
 7 files changed, 126 insertions(+), 1 deletion(-)
 create mode 100644 net/core/skbuff_notifier.c
 create mode 100644 net/core/skbuff_notifier.h

--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -148,6 +148,7 @@ M:	Casey Chen <kexinc@codeaurora.org>
 S:	Maintained
 F:	net/core/skbuff_recycle.*
 F:	net/core/skbuff_debug.*
+F:	net/core/skbuff_notifier.*
 
 3C59X NETWORK DRIVER
 M:	Steffen Klassert <klassert@kernel.org>
--- a/include/linux/debugobjects.h
+++ b/include/linux/debugobjects.h
@@ -68,6 +68,7 @@ extern void debug_object_init      (void
 extern void
 debug_object_init_on_stack(void *addr, const struct debug_obj_descr *descr);
 extern int debug_object_activate  (void *addr, const struct debug_obj_descr *descr);
+extern int debug_object_get_state(void *addr);
 extern void debug_object_deactivate(void *addr, const struct debug_obj_descr *descr);
 extern void debug_object_destroy   (void *addr, const struct debug_obj_descr *descr);
 extern void debug_object_free      (void *addr, const struct debug_obj_descr *descr);
@@ -85,6 +86,7 @@ debug_object_active_state(void *addr, co
 extern void debug_objects_early_init(void);
 extern void debug_objects_mem_init(void);
 #else
+static inline int debug_object_get_state(void *addr) { return 0; }
 static inline void
 debug_object_init      (void *addr, const struct debug_obj_descr *descr) { }
 static inline void
--- a/lib/debugobjects.c
+++ b/lib/debugobjects.c
@@ -496,6 +496,29 @@ static struct debug_bucket *get_bucket(u
 	return &obj_hash[hash];
 }
 
+/*
+ * debug_object_get_state():
+ *   returns the state of an object given an address
+ */
+int debug_object_get_state(void *addr)
+{
+	struct debug_bucket *db;
+	struct debug_obj *obj;
+	unsigned long flags;
+	enum debug_obj_state state = ODEBUG_STATE_NOTAVAILABLE;
+
+	db = get_bucket((unsigned long) addr);
+
+	raw_spin_lock_irqsave(&db->lock, flags);
+	obj = lookup_object(addr, db);
+	if (obj)
+		state = obj->state;
+	raw_spin_unlock_irqrestore(&db->lock, flags);
+
+	return state;
+}
+EXPORT_SYMBOL(debug_object_get_state);
+
 static void debug_print_object(struct debug_obj *obj, char *msg)
 {
 	const struct debug_obj_descr *descr = obj->descr;
--- a/net/core/Makefile
+++ b/net/core/Makefile
@@ -39,4 +39,4 @@ obj-$(CONFIG_BPF_SYSCALL) += sock_map.o
 obj-$(CONFIG_BPF_SYSCALL) += bpf_sk_storage.o
 obj-$(CONFIG_OF)	+= of_net.o
 obj-$(CONFIG_SKB_RECYCLER) += skbuff_recycle.o
-obj-$(CONFIG_DEBUG_OBJECTS_SKBUFF) += skbuff_debug.o
+obj-$(CONFIG_DEBUG_OBJECTS_SKBUFF) += skbuff_debug.o skbuff_notifier.o
--- a/net/core/skbuff_debug.c
+++ b/net/core/skbuff_debug.c
@@ -20,6 +20,7 @@
 #include <linux/module.h>
 
 #include "skbuff_debug.h"
+#include "skbuff_notifier.h"
 
 static int skbuff_debugobj_enabled __read_mostly = 1;
 
@@ -112,6 +113,7 @@ static int skbuff_debugobj_fixup(void *a
 	WARN(1, "skbuff_debug: state = %d, skb = 0x%p sum = %d (%d)\n",
 	     state, skb, skb->sum, skbuff_debugobj_sum(skb));
 	skbuff_debugobj_print_skb(skb);
+	skb_recycler_notifier_send_event(SKB_RECYCLER_NOTIFIER_FSM, skb);
 
 #ifdef CONFIG_ARM64
 	return true;
@@ -149,6 +151,7 @@ err_act:
 	WARN(1, "skb_debug: failed to activate err = %d skb = 0x%p sum = %d (%d)\n",
 	     ret, skb, skb->sum, skbuff_debugobj_sum(skb));
 	skbuff_debugobj_print_skb(skb);
+	skb_recycler_notifier_send_event(SKB_RECYCLER_NOTIFIER_DBLALLOC, skb);
 }
 
 inline void skbuff_debugobj_init_and_activate(struct sk_buff *skb)
@@ -186,6 +189,7 @@ inline void skbuff_debugobj_deactivate(s
 	WARN(1, "skbuff_debug: deactivating inactive object skb=0x%p state=%d sum = %d (%d)\n",
 	     skb, obj_state, skb->sum, skbuff_debugobj_sum(skb));
 	skbuff_debugobj_print_skb(skb);
+	skb_recycler_notifier_send_event(SKB_RECYCLER_NOTIFIER_DBLFREE, skb);
 }
 
 inline void skbuff_debugobj_sum_validate(struct sk_buff *skb)
@@ -200,6 +204,7 @@ inline void skbuff_debugobj_sum_validate
 	WARN(1, "skb_debug: skb changed while deactive skb = 0x%p sum = %d (%d)\n",
 	     skb, skb->sum, skbuff_debugobj_sum(skb));
 	skbuff_debugobj_print_skb(skb);
+	skb_recycler_notifier_send_event(SKB_RECYCLER_NOTIFIER_SUMERR, skb);
 }
 
 inline void skbuff_debugobj_sum_update(struct sk_buff *skb)
--- /dev/null
+++ b/net/core/skbuff_notifier.c
@@ -0,0 +1,42 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+/* Notifier interface for the SKB Recycler */
+
+#include "skbuff_notifier.h"
+
+static BLOCKING_NOTIFIER_HEAD(skb_recycler_notifier);
+
+int skb_recycler_notifier_register(struct notifier_block *nb)
+{
+	return blocking_notifier_chain_register(&skb_recycler_notifier, nb);
+}
+EXPORT_SYMBOL(skb_recycler_notifier_register);
+
+int skb_recycler_notifier_unregister(struct notifier_block *nb)
+{
+	return blocking_notifier_chain_unregister(&skb_recycler_notifier, nb);
+}
+EXPORT_SYMBOL(skb_recycler_notifier_unregister);
+
+int skb_recycler_notifier_send_event(unsigned long action, struct sk_buff *skb)
+{
+	int ret;
+
+	ret = blocking_notifier_call_chain(&skb_recycler_notifier, action, skb);
+
+	return 0;
+}
--- /dev/null
+++ b/net/core/skbuff_notifier.h
@@ -0,0 +1,52 @@
+/* 
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#ifndef SKBUFF_NOTIFIER_H
+#define SKBUFF_NOTIFIER_H
+
+#include <linux/notifier.h>
+#include <linux/skbuff.h>
+
+/* notifier events */
+#define SKB_RECYCLER_NOTIFIER_SUMERR   0x0001
+#define SKB_RECYCLER_NOTIFIER_DBLFREE  0x0002
+#define SKB_RECYCLER_NOTIFIER_DBLALLOC 0x0004
+#define SKB_RECYCLER_NOTIFIER_FSM      0x0008
+
+#if defined(CONFIG_DEBUG_OBJECTS_SKBUFF)
+int skb_recycler_notifier_register(struct notifier_block *nb);
+int skb_recycler_notifier_unregister(struct notifier_block *nb);
+int skb_recycler_notifier_send_event(unsigned long action,
+				     struct sk_buff *skb);
+#else
+static inline int skb_recycler_notifier_register(struct notifier_block *nb)
+{
+	return 0;
+}
+
+static inline int skb_recycler_notifier_unregister(struct notifier_block *nb)
+{
+	return 0;
+}
+
+static inline int skb_recycler_notifier_send_event(unsigned long action,
+						   struct sk_buff *skb)
+{
+	return 1;
+}
+#endif /* CONFIG_DEBUG_OBJECTS_SKBUFF */
+
+#endif /* SKBUFF_NOTIFIER_H */
