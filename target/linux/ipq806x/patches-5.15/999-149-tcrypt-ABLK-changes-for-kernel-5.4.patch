From 2f9a67e6811915911fb12234c701d0ec1794d44d Mon Sep 17 00:00:00 2001
From: Pavithra R <pavir@codeaurora.org>
Date: Thu, 27 Aug 2020 23:25:36 +0530
Subject: [PATCH] tcrypt: ABLK changes for kernel 5.4

Change-Id: I397545439379683a670e7cdbd991fee216b3ac41
Signed-off-by: Pavithra R <pavir@codeaurora.org>
---
 crypto/Kconfig   | 18 ++++++++++++++++++
 crypto/tcrypt.c  |  8 ++++++++
 crypto/testmgr.c | 18 ++++++++++++++----
 3 files changed, 40 insertions(+), 4 deletions(-)

--- a/crypto/Kconfig
+++ b/crypto/Kconfig
@@ -207,6 +207,24 @@ config CRYPTO_TEST
 	help
 	  Quick & dirty crypto test module.
 
+config CRYPTO_DISABLE_OUTOFPLACE_TESTS
+	bool "Disable out-of-place tests"
+	default y
+	help
+	  Disable out-of-place tests
+
+config CRYPTO_DISABLE_AUTH_SPLIT_TESTS
+	bool "Disable test cases where authentication data is split between buffers"
+	default y
+	help
+	  Disable authentication split tests
+
+config CRYPTO_DISABLE_HW_UNSUPPORTED_TESTS
+	bool "Disable test cases not supported by HW"
+	default y
+	help
+	  Disable hw unsupported test cases
+
 config CRYPTO_SIMD
 	tristate
 	select CRYPTO_CRYPTD
--- a/crypto/tcrypt.c
+++ b/crypto/tcrypt.c
@@ -1735,12 +1735,16 @@ static int do_test(const char *alg, u32
 	case 10:
 		ret += tcrypt_test("ecb(aes)");
 		ret += tcrypt_test("cbc(aes)");
+#ifdef CONFIG_CRYPTO_LRW
 		ret += tcrypt_test("lrw(aes)");
+#endif
 		ret += tcrypt_test("xts(aes)");
 		ret += tcrypt_test("ctr(aes)");
 		ret += tcrypt_test("rfc3686(ctr(aes))");
 		ret += tcrypt_test("ofb(aes)");
+#ifdef CRYPTO_DISABLE_HW_UNSUPPORTED_TESTS
 		ret += tcrypt_test("cfb(aes)");
+#endif
 		break;
 
 	case 11:
@@ -2067,10 +2071,12 @@ static int do_test(const char *alg, u32
 				speed_template_16_24_32);
 		test_cipher_speed("cbc(aes)", DECRYPT, sec, NULL, 0,
 				speed_template_16_24_32);
+#ifdef CONFIG_CRYPTO_LRW
 		test_cipher_speed("lrw(aes)", ENCRYPT, sec, NULL, 0,
 				speed_template_32_40_48);
 		test_cipher_speed("lrw(aes)", DECRYPT, sec, NULL, 0,
 				speed_template_32_40_48);
+#endif
 		test_cipher_speed("xts(aes)", ENCRYPT, sec, NULL, 0,
 				speed_template_32_64);
 		test_cipher_speed("xts(aes)", DECRYPT, sec, NULL, 0,
@@ -2083,10 +2089,12 @@ static int do_test(const char *alg, u32
 				speed_template_16_24_32);
 		test_cipher_speed("ctr(aes)", DECRYPT, sec, NULL, 0,
 				speed_template_16_24_32);
+#ifdef CRYPTO_DISABLE_HW_UNSUPPORTED_TESTS
 		test_cipher_speed("cfb(aes)", ENCRYPT, sec, NULL, 0,
 				speed_template_16_24_32);
 		test_cipher_speed("cfb(aes)", DECRYPT, sec, NULL, 0,
 				speed_template_16_24_32);
+#endif
 		break;
 
 	case 201:
--- a/crypto/testmgr.c
+++ b/crypto/testmgr.c
@@ -313,16 +313,22 @@ static const struct testvec_config defau
 		.name = "in-place",
 		.inplace = true,
 		.src_divs = { { .proportion_of_total = 10000 } },
-	}, {
+	},
+#ifndef CONFIG_CRYPTO_DISABLE_OUTOFPLACE_TESTS
+	{
 		.name = "out-of-place",
 		.src_divs = { { .proportion_of_total = 10000 } },
-	}, {
+	},
+#endif
+	{
 		.name = "unaligned buffer, offset=1",
+		.inplace = true,
 		.src_divs = { { .proportion_of_total = 10000, .offset = 1 } },
 		.iv_offset = 1,
 		.key_offset = 1,
 	}, {
 		.name = "buffer aligned only to alignmask",
+		.inplace = true,
 		.src_divs = {
 			{
 				.proportion_of_total = 10000,
@@ -334,7 +340,10 @@ static const struct testvec_config defau
 		.iv_offset_relative_to_alignmask = true,
 		.key_offset = 1,
 		.key_offset_relative_to_alignmask = true,
-	}, {
+	},
+#ifndef CONFIG_CRYPTO_DISABLE_AUTH_SPLIT_TESTS
+	/* HW requires authentication data not be to be split between scatters */
+	{
 		.name = "two even aligned splits",
 		.src_divs = {
 			{ .proportion_of_total = 5000 },
@@ -363,6 +372,7 @@ static const struct testvec_config defau
 			},
 		},
 	}
+#endif
 };
 
 static const struct testvec_config default_hash_testvec_configs[] = {
