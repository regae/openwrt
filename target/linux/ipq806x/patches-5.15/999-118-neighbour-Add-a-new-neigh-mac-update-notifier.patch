From cb67c57780d49d98a74a9235454d3dc4978529c2 Mon Sep 17 00:00:00 2001
From: Murat Sezgin <msezgin@codeaurora.org>
Date: Thu, 5 May 2016 14:01:51 -0700
Subject: [PATCH] neighbour: Add a new neigh mac update notifier

With this new notifier, neighbour subsystem will
provide a neighbour mac address update notification
with both the old and new mac adress. This helps the
other subsystems to do whatever they want with the old
mac address, if they used it in their own purpose.

Change-Id: I86f6f7107b4c840d05bce167594fdd43d7bb0ff3
Signed-off-by: Murat Sezgin <msezgin@codeaurora.org>
---
 include/net/neighbour.h |  8 ++++++++
 net/core/neighbour.c    | 24 +++++++++++++++++++++++-
 2 files changed, 31 insertions(+), 1 deletion(-)

--- a/include/net/neighbour.h
+++ b/include/net/neighbour.h
@@ -241,6 +241,11 @@ static inline int neigh_parms_family(str
 	return p->tbl->family;
 }
 
+struct neigh_mac_update {
+	unsigned char old_mac[ALIGN(MAX_ADDR_LEN, sizeof(unsigned long))];
+	unsigned char update_mac[ALIGN(MAX_ADDR_LEN, sizeof(unsigned long))];
+};
+
 #define NEIGH_PRIV_ALIGN	sizeof(long long)
 #define NEIGH_ENTRY_SIZE(size)	ALIGN((size), NEIGH_PRIV_ALIGN)
 
@@ -369,6 +374,9 @@ int neigh_xmit(int fam, struct net_devic
 void pneigh_for_each(struct neigh_table *tbl,
 		     void (*cb)(struct pneigh_entry *));
 
+extern void neigh_mac_update_register_notify(struct notifier_block *nb);
+extern void neigh_mac_update_unregister_notify(struct notifier_block *nb);
+
 struct neigh_seq_state {
 	struct seq_net_private p;
 	struct neigh_table *tbl;
--- a/net/core/neighbour.c
+++ b/net/core/neighbour.c
@@ -1211,7 +1211,19 @@ static void neigh_update_hhs(struct neig
 	}
 }
 
+ATOMIC_NOTIFIER_HEAD(neigh_mac_update_notifier_list);
 
+void neigh_mac_update_register_notify(struct notifier_block *nb)
+{
+	atomic_notifier_chain_register(&neigh_mac_update_notifier_list, nb);
+}
+EXPORT_SYMBOL_GPL(neigh_mac_update_register_notify);
+
+void neigh_mac_update_unregister_notify(struct notifier_block *nb)
+{
+	atomic_notifier_chain_unregister(&neigh_mac_update_notifier_list, nb);
+}
+EXPORT_SYMBOL_GPL(neigh_mac_update_unregister_notify);
 
 /* Generic update routine.
    -- lladdr is new lladdr or NULL, if it is not supplied.
@@ -1242,6 +1254,7 @@ static int __neigh_update(struct neighbo
 	int notify = 0;
 	struct net_device *dev;
 	int update_isrouter = 0;
+	struct neigh_mac_update nmu;
 
 	trace_neigh_update(neigh, lladdr, new, flags, nlmsg_pid);
 
@@ -1251,6 +1264,8 @@ static int __neigh_update(struct neighbo
 	old    = neigh->nud_state;
 	err    = -EPERM;
 
+	memset(&nmu, 0, sizeof(struct neigh_mac_update));
+
 	if (neigh->dead) {
 		NL_SET_ERR_MSG(extack, "Neighbor entry is now dead");
 		new = old;
@@ -1292,7 +1307,11 @@ static int __neigh_update(struct neighbo
 		   and a new address is proposed:
 		   - compare new & old
 		   - if they are different, check override flag
+		   - copy old and new addresses for neigh update notification
 		 */
+		memcpy(nmu.old_mac, neigh->ha, dev->addr_len);
+		memcpy(nmu.update_mac, lladdr, dev->addr_len);
+
 		if ((old & NUD_VALID) &&
 		    !memcmp(lladdr, neigh->ha, dev->addr_len))
 			lladdr = neigh->ha;
@@ -1415,8 +1434,11 @@ out:
 	if (((new ^ old) & NUD_PERMANENT) || ext_learn_change)
 		neigh_update_gc_list(neigh);
 
-	if (notify)
+	if (notify) {
 		neigh_update_notify(neigh, nlmsg_pid);
+		atomic_notifier_call_chain(&neigh_mac_update_notifier_list, 0,
+					   (struct neigh_mac_update *)&nmu);
+	}
 
 	trace_neigh_update_done(neigh, err);
 
