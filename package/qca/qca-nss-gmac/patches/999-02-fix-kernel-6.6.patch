--- a/ipq806x/include/msm_nss_gmac.h
+++ b/ipq806x/include/msm_nss_gmac.h
@@ -318,7 +318,7 @@ struct msm_nss_gmac_platform_data {
 	uint32_t poll_required;		/* [0/1] Link status poll? */
 	uint32_t rgmii_delay;
 	phy_interface_t phy_mii_type;
-	uint8_t  mac_addr[6];
+	const uint8_t  mac_addr[6];
 	int32_t forced_speed;		/* Forced speed. Values used from
 					   ethtool.h. 0 = Speed not forced */
 	int32_t forced_duplex;		/* Forced duplex. Values used from
--- a/ipq806x/nss_gmac_dev.c
+++ b/ipq806x/nss_gmac_dev.c
@@ -1167,7 +1167,7 @@ void nss_gmac_mac_init(struct nss_gmac_dev *gmacdev)
 	nss_gmac_deferral_check_disable(gmacdev);
 
 	nss_gmac_set_mac_addr(gmacdev, gmac_addr0_high,
-			      gmac_addr0_low, gmacdev->netdev->dev_addr);
+			      gmac_addr0_low, (uint8_t *)gmacdev->netdev->dev_addr);
 
 	/*Frame Filter Configuration */
 	nss_gmac_frame_filter_enable(gmacdev);
--- a/ipq806x/nss_gmac_ctrl.c
+++ b/ipq806x/nss_gmac_ctrl.c
@@ -380,9 +380,9 @@ static int32_t nss_gmac_set_mac_address(struct net_device *netdev,
 		return -EADDRNOTAVAIL;
 
 	nss_gmac_set_mac_addr(gmacdev, gmac_addr0_high, gmac_addr0_low,
-			      addr->sa_data);
+			      (uint8_t *)addr->sa_data);
 	nss_gmac_get_mac_addr(gmacdev, gmac_addr0_high, gmac_addr0_low,
-			      netdev->dev_addr);
+			     (uint8_t *)netdev->dev_addr);
 
 	return 0;
 }
@@ -1029,7 +1029,7 @@ static int32_t nss_gmac_of_get_pdata(struct device_node *np,
 		return -EFAULT;
 	}
 
-	of_get_mac_address(np, gmaccfg->mac_addr);
+	of_get_mac_address(np, (uint8_t *)gmaccfg->mac_addr);
 
 	if (of_address_to_resource(np, 0, &memres_devtree) != 0)
 		return -EFAULT;
@@ -1351,9 +1351,10 @@ static int32_t nss_gmac_probe(struct platform_device *pdev)
 	 * This just fill in some default MAC address
 	 */
 	if (is_valid_ether_addr(gmaccfg->mac_addr)) {
-		memcpy(netdev->dev_addr, &gmaccfg->mac_addr, ETH_ALEN);
+		//memcpy(netdev->dev_addr, &gmaccfg->mac_addr, ETH_ALEN);
+		__dev_addr_set(netdev, &gmaccfg->mac_addr, ETH_ALEN);
 	} else {
-		random_ether_addr(netdev->dev_addr);
+		eth_random_addr((uint8_t *)netdev->dev_addr);
 		pr_info("GMAC%d(%p) Invalid MAC@ - using %02x:%02x:%02x:%02x:%02x:%02x\n",
 			gmacdev->macid, gmacdev,
 			*netdev->dev_addr, *netdev->dev_addr+1,
--- a/ipq806x/nss_gmac_tx_rx_offload.c
+++ b/ipq806x/nss_gmac_tx_rx_offload.c
@@ -945,7 +945,7 @@ int nss_gmac_open(struct net_device *netdev)
 		netdev_info(netdev, "%s: offload is not enabled, bring up gmac with slowpath\n",
 								__func__);
 
-		netif_napi_add(netdev, &gmacdev->napi, nss_gmac_poll,
+		netif_napi_add_weight(netdev, &gmacdev->napi, nss_gmac_poll,
 							NSS_GMAC_NAPI_BUDGET);
 		/* Initial the RX/TX ring */
 		dma_set_coherent_mask(dev, 0xffffffff);
