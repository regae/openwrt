--- a/mc_osdep.h
+++ b/mc_osdep.h
@@ -24,7 +24,11 @@
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 0, 0))
 static inline int os_br_pass_frame_up(struct sk_buff *skb)
 {
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 15, 147))
+	return br_pass_frame_up(skb, false);
+#else
 	return br_pass_frame_up(skb);
+#endif
 }
 #else
 static inline int os_br_pass_frame_up(struct sk_buff *skb)
@@ -189,7 +193,7 @@ static inline struct net_bridge_port *mc_bridge_get_dst(const struct net_bridge_port *src,
 
 	dst = os_br_fdb_get((struct net_bridge *)br, eth_hdr(*skb)->h_dest);
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 15, 0))
 	if (dst && !test_bit(BR_FDB_LOCAL, &dst->flags))
 #else
 	if (dst && !dst->is_local)
--- a/mc_snooping.c
+++ b/mc_snooping.c
@@ -3509,7 +3509,7 @@ static int mc_proc_snooper_open(struct inode *inode, struct file *file)
         return single_open(file, mc_proc_snooper_show, NULL);
 }
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 15, 0))
 static const struct proc_ops mc_proc_snooper_proc_ops = {
         .proc_open           = mc_proc_snooper_open,
         .proc_read           = seq_read,
@@ -3533,7 +3533,7 @@ int mc_proc_create_snooper_entry(void) {
 
 	mc_proc_root = proc_mkdir(MCS_PROC_ROOT_NAME, init_net.proc_net);
 	if (mc_proc_root) {
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 15, 0))
 		mc_proc_inst_entry = proc_create(MCS_PROC_INST_NAME, 0444, mc_proc_root, &mc_proc_snooper_proc_ops);
 #else
 		mc_proc_inst_entry = proc_create(MCS_PROC_INST_NAME, 0444, mc_proc_root, &mc_proc_snooper_fops);
