--- a/drivers/net/wireless/ath/ath10k/core.c
+++ b/drivers/net/wireless/ath/ath10k/core.c
@@ -764,6 +764,18 @@ static const char *const ath10k_core_fw_
 	[ATH10K_FW_FEATURE_IRAM_RECOVERY] = "iram-recovery",
 };
 
+/* decode64(), strip_nl() are from decode64.c chromium os cfd2bee9ca3 */
+static char revkey[128] = {
+	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,
+	52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,
+	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
+	15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
+	-1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
+	41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
+};
+
 static unsigned int ath10k_core_get_fw_feature_str(char *buf,
 						   size_t buf_len,
 						   enum ath10k_fw_features feat)
@@ -1877,7 +1889,65 @@ static int ath10k_download_cal_file(stru
 	return 0;
 }
 
-static int ath10k_download_cal_dt(struct ath10k *ar, const char *dt_name)
+static int
+decode64(unsigned char *src, unsigned char *src_end, unsigned char *dst)
+{
+	unsigned char *dst_end = dst;
+
+	while (&src[3] < src_end) {
+		int x;
+		int t[4];
+		int i;
+
+		if (src[0] == '=' || src[1] == '=' ||
+		    (src[2] == '=' && src[3] != '=')) {
+			return -1;
+		}
+
+		for (i = 0; i < 4; i++) {
+			if (src[i] == '=') {
+				t[i] = 0;
+			} else {
+				if (src[i] >= 128 ||
+				    ((t[i] = revkey[src[i]]) < 0)) {
+					return -1;
+				}
+			}
+		}
+
+		x = (t[0] << 18) + (t[1] << 12) + (t[2] << 6) + t[3];
+
+		*dst_end++ = (x >> 16) & 0xff;
+		if (src[2] != '=')
+			*dst_end++ = (x >> 8) & 0xff;
+		if (src[3] != '=')
+			*dst_end++ = x & 0xff;
+
+		src += 4;
+	}
+
+	if (src != src_end)
+		return -1;
+
+	return dst_end - dst;
+}
+
+static int
+strip_nl(unsigned char *src, unsigned char *src_end, unsigned char *dst)
+{
+	unsigned char *dst_end = dst;
+
+	while (src < src_end) {
+		if (*src != '\n')
+			*dst_end++ = *src;
+		src++;
+	}
+
+	return dst_end - dst;
+}
+
+static int
+ath10k_download_cal_dt(struct ath10k *ar, const char *dt_name, bool base64)
 {
 	struct device_node *node;
 	int data_len;
@@ -1896,7 +1966,7 @@ static int ath10k_download_cal_dt(struct
 		return -ENOENT;
 	}
 
-	if (data_len != ar->hw_params.cal_data_len) {
+	if (!base64 && data_len != ar->hw_params.cal_data_len) {
 		ath10k_warn(ar, "invalid calibration data length in DT: %d\n",
 			    data_len);
 		ret = -EMSGSIZE;
@@ -1916,6 +1986,24 @@ static int ath10k_download_cal_dt(struct
 		goto out_free;
 	}
 
+	if (base64 && ret == 0) {
+		data_len = strip_nl(data, data + data_len, data);
+		data_len = decode64(data, data + data_len, data);
+		if (data_len < 0) {
+			ath10k_warn(ar,
+				    "base64 decoder found invalid input\n");
+			ret = -EINVAL;
+			goto out_free;
+		}
+
+		if (data_len != ar->hw_params.cal_data_len) {
+			ath10k_warn(ar,
+				   "invalid calibration base64 data length in DT: %d\n", data_len);
+			ret = -EMSGSIZE;
+			goto out_free;
+		}
+	}
+
 	ret = ath10k_download_board_data(ar, data, data_len);
 	if (ret) {
 		ath10k_warn(ar, "failed to download calibration data from Device Tree: %d\n",
@@ -2250,7 +2338,7 @@ static int ath10k_core_pre_cal_download(
 		   "boot did not find a pre calibration file, try DT next: %d\n",
 		   ret);
 
-	ret = ath10k_download_cal_dt(ar, "qcom,ath10k-pre-calibration-data");
+	ret = ath10k_download_cal_dt(ar, "qcom,ath10k-pre-calibration-data", false);
 	if (ret) {
 		ath10k_dbg(ar, ATH10K_DBG_BOOT,
 			   "unable to load pre cal data from DT: %d\n", ret);
@@ -2328,7 +2416,7 @@ static int ath10k_download_cal_data(stru
 		   "boot did not find a calibration file, try DT next: %d\n",
 		   ret);
 
-	ret = ath10k_download_cal_dt(ar, "qcom,ath10k-calibration-data");
+	ret = ath10k_download_cal_dt(ar, "qcom,ath10k-calibration-data", false);
 	if (ret == 0) {
 		ar->cal_mode = ATH10K_CAL_MODE_DT;
 		goto done;
@@ -2345,9 +2433,19 @@ static int ath10k_download_cal_data(stru
 	}
 
 	ath10k_dbg(ar, ATH10K_DBG_BOOT,
-		   "boot did not find target EEPROM entry, try OTP next: %d\n",
+		   "boot did not find target EEPROM entry, try DT base64 next: %d\n",
 		   ret);
 
+	ret = ath10k_download_cal_dt(ar, "qcom,ath10k-calibration-data-base64", true);
+	if (ret == 0) {
+		ath10k_info(ar, "Calibration data from dt base64 found\n");
+		ar->cal_mode = ATH10K_CAL_MODE_DT;
+		goto done;
+	}
+
+	ath10k_dbg(ar, ATH10K_DBG_BOOT,
+		   "boot did not find DT entry, try target OTP next: %d\n", ret);
+
 	ret = ath10k_download_and_run_otp(ar);
 	if (ret) {
 		ath10k_err(ar, "failed to run otp: %d\n", ret);
