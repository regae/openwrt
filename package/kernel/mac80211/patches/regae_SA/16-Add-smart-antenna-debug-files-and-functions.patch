From a45b15dfbfb6f0c6fc0207dad1e8e92539aba091 Mon Sep 17 00:00:00 2001
From: oliverwen <oliverwen@google.com>
Date: Wed, 29 Jun 2016 17:51:35 -0700
Subject: [PATCH] CHROMIUM: Add smart antenna debug files and functions

 - add smart antenna debug files
 - add debug files read and write functions
 - update ath10k_pktlog_filter in debug.h

TEST=Pass compilation and building of ChromeOS image.
Run iperf on TCP/UDP DL/UL Tput tests, this CL should
have no impact on Tput.

BUG=chrome-os-partner:51964
CQ-DEPEND=CL:341551

Signed-off-by: oliverwen <oliverwen@google.com>
(cherry picked from commit 14e23ce45fdb3f7cb4dbc02aa0e66730ef4b2d32)
(cherry picked from wireless-3.18)

Change-Id: If00614350d40885040b658c1de4897fec78dca63
Reviewed-on: https://chromium-review.googlesource.com/341552
Commit-Ready: Yixiang Li <yixiang@google.com>
Tested-by: Oliver Wen <oliverwen@chromium.org>
Reviewed-by: Yixiang Li <yixiang@google.com>
---
 .../wireless-4.2/ath/ath10k/debug_smart_ant.c | 222 ++++++++++++++++--
 1 file changed, 201 insertions(+), 21 deletions(-)

diff --git a/drivers/net/wireless/ath/ath10k/debug_smart_ant.c b/drivers/net/wireless/ath/ath10k/debug_smart_ant.c
index 0a487801128..5056d34a081 100644
--- a/drivers/net/wireless/ath/ath10k/debug_smart_ant.c
+++ b/drivers/net/wireless/ath/ath10k/debug_smart_ant.c
@@ -21,8 +21,8 @@
 #include "smart_ant.h"
 
 static ssize_t ath10k_write_sa_enable_ops(struct file *file,
-					  const char __user *user_buf,
-					  size_t count, loff_t *ppos)
+					const char __user *user_buf,
+					size_t count, loff_t *ppos)
 {
 	struct ath10k *ar = file->private_data;
 	int ret;
@@ -73,7 +73,7 @@ static ssize_t ath10k_write_sa_enable_ops(struct file *file,
 	ar->smart_ant_info.enabled = enable;
 
 	ath10k_dbg(ar, ATH10K_DBG_SMART_ANT, "Smart antenna %s\n",
-		   enable ? "enabled" : "disabled");
+			enable ? "enabled" : "disabled");
 exit:
 	mutex_unlock(&ar->conf_mutex);
 	if (ret)
@@ -83,7 +83,7 @@ exit:
 }
 
 static ssize_t ath10k_read_sa_enable_ops(struct file *file, char __user *ubuf,
-					 size_t count, loff_t *ppos)
+					size_t count, loff_t *ppos)
 {
 	struct ath10k *ar = file->private_data;
 	char buf[4];
@@ -107,8 +107,8 @@ static const struct file_operations fops_sa_enable_ops = {
 };
 
 static ssize_t ath10k_write_sa_tx_ant_ops(struct file *file,
-					  const char __user *user_buf,
-					  size_t count, loff_t *ppos)
+					const char __user *user_buf,
+					size_t count, loff_t *ppos)
 {
 	struct ath10k *ar = file->private_data;
 	u32 ants[WMI_SMART_ANT_RATE_SERIES_MAX], txant;
@@ -169,7 +169,8 @@ static ssize_t ath10k_write_sa_tx_ant_ops(struct file *file,
 	for (i = 0; i < WMI_SMART_ANT_RATE_SERIES_MAX; i++)
 		ants[i] = txant;
 
-	ath10k_dbg(ar, ATH10K_DBG_SMART_ANT, "Smart antenna set tx antenna to %d\n",
+	ath10k_dbg(ar, ATH10K_DBG_SMART_ANT,
+		   "Smart antenna set tx antenna to %d\n",
 		   txant);
 	mutex_lock(&ar->conf_mutex);
 	ret = ath10k_wmi_peer_set_smart_tx_ant(
@@ -191,7 +192,7 @@ static const struct file_operations fops_sa_tx_ant_ops = {
 };
 
 static ssize_t ath10k_read_sa_rx_ant_ops(struct file *file, char __user *ubuf,
-					 size_t count, loff_t *ppos)
+					size_t count, loff_t *ppos)
 {
 	char buf[4];
 	struct ath10k *ar = file->private_data;
@@ -204,8 +205,8 @@ static ssize_t ath10k_read_sa_rx_ant_ops(struct file *file, char __user *ubuf,
 }
 
 static ssize_t ath10k_write_sa_rx_ant_ops(struct file *file,
-					  const char __user *user_buf,
-					  size_t count, loff_t *ppos)
+					const char __user *user_buf,
+					size_t count, loff_t *ppos)
 {
 	struct ath10k *ar = file->private_data;
 	u8 rxant;
@@ -223,7 +224,7 @@ static ssize_t ath10k_write_sa_rx_ant_ops(struct file *file,
 	}
 
 	ath10k_dbg(ar, ATH10K_DBG_SMART_ANT,
-		   "Setting Rx antenna to %d\n", rxant);
+		"Setting Rx antenna to %d\n", rxant);
 
 	mutex_lock(&ar->conf_mutex);
 	ret = ath10k_wmi_pdev_set_rx_ant(ar, rxant);
@@ -243,6 +244,145 @@ static const struct file_operations fops_sa_rx_ant_ops = {
 	.llseek = default_llseek,
 };
 
+static ssize_t ath10k_read_sa_periodic_intvl_ops(struct file *file,
+						 char __user *ubuf,
+						 size_t count, loff_t *ppos)
+{
+	/* To read the retrain interval from                */
+	/* smart_ant_info.smart_ant_params.retrain_interval */
+	/* in jiffies and convert it into len in second     */
+	char buf[32];
+	struct ath10k *ar = file->private_data;
+	struct ath10k_smart_ant_params *sparams =
+					&ar->smart_ant_info.smart_ant_params;
+	int len = 0;
+
+	len = scnprintf(buf, sizeof(buf) - len, "%d seconds\n",
+			(jiffies_to_msecs(sparams->retrain_interval)) / 1000);
+
+	return simple_read_from_buffer(ubuf, count, ppos, buf, len);
+}
+
+static ssize_t ath10k_write_sa_periodic_intvl_ops(struct file *file,
+						  const char __user *user_buf,
+						  size_t count, loff_t *ppos)
+{
+	/* To read retrain interval from user buffer,                     */
+	/* convert it from second to ms and to jiffies,                   */
+	/* then write to smart_ant_info.smart_ant_params.retrain_interval */
+	struct ath10k *ar = file->private_data;
+	struct ath10k_smart_ant_params *sparams =
+					&ar->smart_ant_info.smart_ant_params;
+	u32 interval;
+
+	if (!ath10k_smart_ant_enabled(ar))
+		return -ENOTSUPP;
+
+	if (kstrtoint_from_user(user_buf, count, 0, &interval))
+		return -EINVAL;
+
+	sparams->retrain_interval = msecs_to_jiffies(interval * 1000);
+
+	return count;
+}
+
+static const struct file_operations fops_sa_periodic_intvl_ops = {
+	.read = ath10k_read_sa_periodic_intvl_ops,
+	.write = ath10k_write_sa_periodic_intvl_ops,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
+static ssize_t ath10k_read_sa_perf_intvl_ops(struct file *file,
+					     char __user *ubuf,
+					     size_t count, loff_t *ppos)
+{
+	char buf[32];
+	struct ath10k *ar = file->private_data;
+	struct ath10k_smart_ant_params *sparams =
+					&ar->smart_ant_info.smart_ant_params;
+	int len = 0;
+
+	len = scnprintf(
+		buf, sizeof(buf) - len, "%d seconds\n",
+		(jiffies_to_msecs(sparams->perf_train_interval)) / 1000);
+
+	return simple_read_from_buffer(ubuf, count, ppos, buf, len);
+}
+
+static ssize_t ath10k_write_sa_perf_intvl_ops(struct file *file,
+					      const char __user *user_buf,
+					      size_t count, loff_t *ppos)
+{
+	struct ath10k *ar = file->private_data;
+	struct ath10k_smart_ant_params *sparams =
+					&ar->smart_ant_info.smart_ant_params;
+	u32 interval;
+
+	if (!ath10k_smart_ant_enabled(ar))
+		return -ENOTSUPP;
+
+	if (kstrtoint_from_user(user_buf, count, 0, &interval))
+		return -EINVAL;
+
+	sparams->perf_train_interval = msecs_to_jiffies(interval * 1000);
+
+	return count;
+}
+
+static const struct file_operations fops_sa_perf_intvl_ops = {
+	.read = ath10k_read_sa_perf_intvl_ops,
+	.write = ath10k_write_sa_perf_intvl_ops,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
+static ssize_t ath10k_read_sa_perf_tput_delta_ops(struct file *file,
+						  char __user *ubuf,
+						  size_t count, loff_t *ppos)
+{
+	char buf[16];
+	struct ath10k *ar = file->private_data;
+	struct ath10k_smart_ant_params *sparams =
+					&ar->smart_ant_info.smart_ant_params;
+	int len = 0;
+
+	len = scnprintf(buf, sizeof(buf) - len, "%d percent\n",
+			sparams->max_perf_delta);
+
+	return simple_read_from_buffer(ubuf, count, ppos, buf, len);
+}
+
+static ssize_t ath10k_write_sa_perf_tput_delta_ops(struct file *file,
+						   const char __user *user_buf,
+						   size_t count, loff_t *ppos)
+{
+	struct ath10k *ar = file->private_data;
+	struct ath10k_smart_ant_params *sparams =
+					&ar->smart_ant_info.smart_ant_params;
+	u8 tput_percent_threshold;
+
+	if (!ath10k_smart_ant_enabled(ar))
+		return -ENOTSUPP;
+
+	if (kstrtou8_from_user(user_buf, count, 0, &tput_percent_threshold))
+		return -EINVAL;
+
+	sparams->max_perf_delta = tput_percent_threshold;
+
+	return count;
+}
+
+static const struct file_operations fops_sa_perf_tput_delta_ops = {
+	.read = ath10k_read_sa_perf_tput_delta_ops,
+	.write = ath10k_write_sa_perf_tput_delta_ops,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 static ssize_t ath10k_write_sa_train_info_ops(struct file *file,
 					      const char __user *user_buf,
 					      size_t count, loff_t *ppos)
@@ -253,6 +393,7 @@ static ssize_t ath10k_write_sa_train_info_ops(struct file *file,
 	struct ath10k_sta *arsta;
 	struct wmi_peer_sant_set_train_arg arg;
 	int ret, i, vdev_id, len;
+	u32 rate_mask = 0;
 	char *token, *sptr;
 	char buf[128];
 
@@ -315,19 +456,30 @@ static ssize_t ath10k_write_sa_train_info_ops(struct file *file,
 		return -EINVAL;
 	}
 
+	for (i = 0; i <= sta->deflink.bandwidth; i++)
+		rate_mask |= (0xff << (8 * i));
+
+	if ((arg.rates[0] & rate_mask) != arg.rates[0]) {
+		ath10k_err(ar, "Invalid rates for training\n");
+		rcu_read_unlock();
+		return -EINVAL;
+	}
+
 	arsta = (struct ath10k_sta *)sta->drv_priv;
 	vdev_id = arsta->arvif->vdev_id;
 
 	rcu_read_unlock();
 
+	ath10k_dbg(ar, ATH10K_DBG_SMART_ANT, "Training for peer %pM num_pkts:%d\n",
+		   mac_addr, arg.num_pkts);
 	for (i = 0; i < WMI_SMART_ANT_RATE_SERIES_MAX; i++) {
 		ath10k_dbg(ar, ATH10K_DBG_SMART_ANT, "rate[%d] 0x%x antenna[%d] %d\n",
-			   i, arg.rates[i], i, arg.antennas[i]);
+				i, arg.rates[i], i, arg.antennas[i]);
 	}
 
 	mutex_lock(&ar->conf_mutex);
 	ret = ath10k_wmi_peer_set_smart_ant_train_info(ar, vdev_id,
-						       mac_addr, &arg);
+							mac_addr, &arg);
 	mutex_unlock(&ar->conf_mutex);
 	if (!ret)
 		ret = count;
@@ -344,16 +496,44 @@ static const struct file_operations fops_sa_train_info_ops = {
 
 void ath10k_smart_ant_debugfs_init(struct ath10k *ar)
 {
-	debugfs_create_file("smart_ant_enable", S_IRUSR | S_IWUSR,
-			    ar->debug.debugfs_phy, ar, &fops_sa_enable_ops);
+	ar->debug.debugfs_smartant = debugfs_create_dir("smart_antenna",
+							ar->debug.debugfs_phy);
+
+	if (IS_ERR(ar->debug.debugfs_smartant) || !ar->debug.debugfs_smartant) {
+		pr_warn("failed to create smart antenna debugfs directory\n");
+		ar->debug.debugfs_smartant = NULL;
+		return;
+	}
+
+	debugfs_create_file(
+		"smart_ant_enable", S_IRUSR | S_IWUSR,
+		ar->debug.debugfs_smartant, ar, &fops_sa_enable_ops);
+
+	debugfs_create_file(
+		"smart_ant_tx_ant", S_IWUSR,
+		ar->debug.debugfs_smartant, ar, &fops_sa_tx_ant_ops);
+
+	debugfs_create_file(
+		"smart_ant_rx_ant", S_IRUSR | S_IWUSR,
+		ar->debug.debugfs_smartant, ar, &fops_sa_rx_ant_ops);
+
+	debugfs_create_file(
+		"smart_ant_periodic_intvl", S_IRUSR | S_IWUSR,
+		ar->debug.debugfs_smartant, ar,
+		&fops_sa_periodic_intvl_ops);
 
-	debugfs_create_file("smart_ant_tx_ant", S_IWUSR,
-			    ar->debug.debugfs_phy, ar, &fops_sa_tx_ant_ops);
+	debugfs_create_file(
+		"smart_ant_performance_intvl", S_IRUSR | S_IWUSR,
+		ar->debug.debugfs_smartant, ar,
+		&fops_sa_perf_intvl_ops);
 
-	debugfs_create_file("smart_ant_rx_ant", S_IRUSR | S_IWUSR,
-			    ar->debug.debugfs_phy, ar, &fops_sa_rx_ant_ops);
+	debugfs_create_file(
+		"smart_ant_perf_train_threshold", S_IRUSR | S_IWUSR,
+		ar->debug.debugfs_smartant, ar,
+		&fops_sa_perf_tput_delta_ops);
 
-	debugfs_create_file("smart_ant_train_info", S_IWUSR,
-			    ar->debug.debugfs_phy, ar, &fops_sa_train_info_ops);
+	debugfs_create_file(
+		"smart_ant_train_info", S_IWUSR,
+		ar->debug.debugfs_smartant, ar, &fops_sa_train_info_ops);
 }
 #endif
-- 
2.43.0

