From 69209ed0c63e89fc37145a602d7235be3a5eae77 Mon Sep 17 00:00:00 2001
From: oliverwen <oliverwen@google.com>
Date: Wed, 29 Jun 2016 11:40:49 -0700
Subject: [PATCH] CHROMIUM: ath10k: Set default antenna when loading driver

Currently, ath10k doesn't set default antenna when smart antenna
is disabled. Set default antenna during driver load. We do this
by adding a new supported value "WMI_SMART_ANT_DISABLED_ANT_SEL"
to the existing smart antenna wmi command that allows the FW to
set the default antenna irrespective of the availability of
Smart Antenna. Default antenna is set to 2.
Also use 2 different default values between 2G and 5G radios.

Also Becaon transmission should take the default antenna.
So change this to default antenna as well.

TEST=build/boot on storm. After the DUT is up, probe the gpio pins
corresponding to antenna. Value should be 010

BUG=chrome-os-partner:51964
CQ-DEPEND=CL:341527

Signed-off-by: oliverwen <oliverwen@google.com>
(cherry picked from commit b84f7193617171ef6fb809a00dd267edd28bce67)
(cherry picked from wireless-3.18)

Change-Id: I6f78f302b1f9ad7bd90d9b35d43789ae32e688ec
Reviewed-on: https://chromium-review.googlesource.com/341528
Commit-Ready: Yixiang Li <yixiang@google.com>
Tested-by: Oliver Wen <oliverwen@chromium.org>
Reviewed-by: Yixiang Li <yixiang@google.com>
---
 drivers/net/wireless/ath/ath10k/debug.h   |  2 -
 drivers/net/wireless/ath/ath10k/mac.c     | 18 +++++++
 drivers/net/wireless/ath/ath10k/wmi-ops.h | 24 +++++++++
 drivers/net/wireless/ath/ath10k/wmi.c     | 50 +++++++++++++++++--
 drivers/net/wireless/ath/ath10k/wmi.h     | 33 +++++++-----
 5 files changed, 107 insertions(+), 20 deletions(-)

diff --git a/drivers/net/wireless/ath/ath10k/debug.h b/drivers/net/wireless/ath/ath10k/debug.h
index 533bcdc04bc..bfc7fae5186 100644
--- a/drivers/net/wireless/ath/ath10k/debug.h
+++ b/drivers/net/wireless/ath/ath10k/debug.h
@@ -35,9 +35,7 @@ enum ath10k_debug_mask {
 	ATH10K_DBG_SNOC		= 0x00100000,
 	ATH10K_DBG_QMI		= 0x00200000,
 	ATH10K_DBG_STA		= 0x00400000,
-#ifdef CPTCFG_ATH10K_SMART_ANTENNA
 	ATH10K_DBG_SMART_ANT	= 0x00800000,
-#endif
 	ATH10K_DBG_ANY		= 0xffffffff,
 };
 
diff --git a/drivers/net/wireless/ath/ath10k/mac.c b/drivers/net/wireless/ath/ath10k/mac.c
index 7b5e0875ac6..ad9a2c54d8b 100644
--- a/drivers/net/wireless/ath/ath10k/mac.c
+++ b/drivers/net/wireless/ath/ath10k/mac.c
@@ -5379,6 +5379,24 @@ static int ath10k_start(struct ieee80211_hw *hw)
 		}
 	}
 
+	if (test_bit(WMI_SERVICE_SMART_ANTENNA_HW_SUPPORT, ar->wmi.svc_map)) {
+		u32 default_antenna_config = ATH10K_DEFAULT_ANTENNA_5G;
+		/* use different smart antenna defaults for 2G and 5G radio.
+		 * use 2G confiuration for dual band radio.
+		 */
+		if (ar->phy_capability & WHAL_WLAN_11G_CAPABILITY)
+			default_antenna_config = ATH10K_DEFAULT_ANTENNA_2G;
+
+		ret = ath10k_wmi_pdev_sa_disabled_ant_sel(
+				ar,
+				WMI_SMART_ANT_DISABLED_MODE_PARALLEL,
+				default_antenna_config, default_antenna_config);
+		if (ret) {
+			ath10k_warn(ar, "failed to set default antenna : %d\n",
+				    ret);
+		}
+	}
+
 	ar->num_started_vdevs = 0;
 	ath10k_regd_update(ar);
 
diff --git a/drivers/net/wireless/ath/ath10k/wmi-ops.h b/drivers/net/wireless/ath/ath10k/wmi-ops.h
index 3ccfb84aa23..2a7555c2402 100644
--- a/drivers/net/wireless/ath/ath10k/wmi-ops.h
+++ b/drivers/net/wireless/ath/ath10k/wmi-ops.h
@@ -226,10 +226,16 @@ struct wmi_ops {
 			 const struct wmi_bb_timing_cfg_arg *arg);
 	struct sk_buff *(*gen_per_peer_per_tid_cfg)(struct ath10k *ar,
 						    const struct wmi_per_peer_per_tid_cfg_arg *arg);
+
 	struct sk_buff *(*gen_gpio_config)(struct ath10k *ar, u32 gpio_num,
 					   u32 input, u32 pull_type, u32 intr_mode);
 
 	struct sk_buff *(*gen_gpio_output)(struct ath10k *ar, u32 gpio_num, u32 set);
+
+	struct sk_buff *(*gen_pdev_sa_disabled_ant_sel)(struct ath10k *ar,
+							u32 mode, u32 tx_ant,
+							u32 rx_ant);
+
 #ifdef CPTCFG_ATH10K_SMART_ANTENNA
 	struct sk_buff *(*gen_pdev_enable_smart_ant)(struct ath10k *ar,
 						     u32 mode, u32 tx_ant,
@@ -1729,6 +1735,24 @@ ath10k_wmi_set_coex_param(struct ath10k *ar, u32 wlan_traffic_priority)
 				   ar->wmi.cmd->per_peer_per_tid_config_cmdid);
 }
 
+static inline int
+ath10k_wmi_pdev_sa_disabled_ant_sel(struct ath10k *ar, u32 mode,
+				    u32 tx_ant, u32 rx_ant)
+{
+	struct sk_buff *skb;
+
+	if (!ar->wmi.ops->gen_pdev_sa_disabled_ant_sel)
+		return -EOPNOTSUPP;
+
+	skb = ar->wmi.ops->gen_pdev_sa_disabled_ant_sel(ar,
+							mode, tx_ant, rx_ant);
+	if (IS_ERR(skb))
+		return PTR_ERR(skb);
+
+	return ath10k_wmi_cmd_send(ar, skb,
+				   ar->wmi.cmd->pdev_set_smart_ant_cmdid);
+}
+
 #ifdef CPTCFG_ATH10K_SMART_ANTENNA
 static inline int
 ath10k_wmi_pdev_enable_smart_ant(struct ath10k *ar, u32 mode,
diff --git a/drivers/net/wireless/ath/ath10k/wmi.c b/drivers/net/wireless/ath/ath10k/wmi.c
index aacdc0ab569..81cf88cb9ab 100644
--- a/drivers/net/wireless/ath/ath10k/wmi.c
+++ b/drivers/net/wireless/ath/ath10k/wmi.c
@@ -191,8 +191,8 @@ static struct wmi_cmd_map wmi_cmd_map = {
 	.pdev_bss_chan_info_request_cmdid = WMI_CMD_UNSUPPORTED,
 	.pdev_get_tpc_table_cmdid = WMI_CMD_UNSUPPORTED,
 	.radar_found_cmdid = WMI_CMD_UNSUPPORTED,
-#ifdef CPTCFG_ATH10K_SMART_ANTENNA
 	.pdev_set_smart_ant_cmdid = WMI_CMD_UNSUPPORTED,
+#ifdef CPTCFG_ATH10K_SMART_ANTENNA
 	.pdev_set_rx_ant_cmdid = WMI_CMD_UNSUPPORTED,
 	.peer_set_smart_tx_ant_cmdid = WMI_CMD_UNSUPPORTED,
 	.peer_smart_ant_fb_config_cmdid = WMI_CMD_UNSUPPORTED,
@@ -367,8 +367,8 @@ static struct wmi_cmd_map wmi_10x_cmd_map = {
 	.pdev_bss_chan_info_request_cmdid = WMI_CMD_UNSUPPORTED,
 	.pdev_get_tpc_table_cmdid = WMI_CMD_UNSUPPORTED,
 	.radar_found_cmdid = WMI_CMD_UNSUPPORTED,
-#ifdef CPTCFG_ATH10K_SMART_ANTENNA
 	.pdev_set_smart_ant_cmdid = WMI_CMD_UNSUPPORTED,
+#ifdef CPTCFG_ATH10K_SMART_ANTENNA
 	.pdev_set_rx_ant_cmdid = WMI_CMD_UNSUPPORTED,
 	.peer_set_smart_tx_ant_cmdid = WMI_CMD_UNSUPPORTED,
 	.peer_smart_ant_fb_config_cmdid = WMI_CMD_UNSUPPORTED,
@@ -544,8 +544,8 @@ static struct wmi_cmd_map wmi_10_2_4_cmd_map = {
 	.pdev_get_tpc_table_cmdid = WMI_CMD_UNSUPPORTED,
 	.radar_found_cmdid = WMI_CMD_UNSUPPORTED,
 	.set_bb_timing_cmdid = WMI_10_2_PDEV_SET_BB_TIMING_CONFIG_CMDID,
-#ifdef CPTCFG_ATH10K_SMART_ANTENNA
 	.pdev_set_smart_ant_cmdid = WMI_10_2_PDEV_SMART_ANT_ENABLE_CMDID,
+#ifdef CPTCFG_ATH10K_SMART_ANTENNA
 	.pdev_set_rx_ant_cmdid = WMI_10_2_PDEV_SMART_ANT_SET_RX_ANTENNA_CMDID,
 	.peer_set_smart_tx_ant_cmdid =
 				WMI_10_2_PEER_SMART_ANT_SET_TX_ANTENNA_CMDID,
@@ -1534,8 +1534,8 @@ static struct wmi_cmd_map wmi_10_2_cmd_map = {
 	.pdev_reserve_ast_entry_cmdid = WMI_CMD_UNSUPPORTED,
 	.pdev_get_tpc_table_cmdid = WMI_CMD_UNSUPPORTED,
 	.radar_found_cmdid = WMI_CMD_UNSUPPORTED,
-#ifdef CPTCFG_ATH10K_SMART_ANTENNA
 	.pdev_set_smart_ant_cmdid = WMI_10_2_PDEV_SMART_ANT_ENABLE_CMDID,
+#ifdef CPTCFG_ATH10K_SMART_ANTENNA
 	.pdev_set_rx_ant_cmdid = WMI_10_2_PDEV_SMART_ANT_SET_RX_ANTENNA_CMDID,
 	.peer_set_smart_tx_ant_cmdid =
 				WMI_10_2_PEER_SMART_ANT_SET_TX_ANTENNA_CMDID,
@@ -7994,7 +7994,18 @@ ath10k_wmi_op_gen_beacon_dma(struct ath10k *ar, u32 vdev_id, const void *bcn,
 	cmd->msdu_id = 0;
 	cmd->frame_control = __cpu_to_le32(fc);
 	cmd->flags = 0;
-	cmd->antenna_mask = __cpu_to_le32(WMI_BCN_TX_REF_DEF_ANTENNA);
+	if (test_bit(WMI_SERVICE_SMART_ANTENNA_HW_SUPPORT, ar->wmi.svc_map)) {
+		cmd->antenna_mask = __cpu_to_le32(ATH10K_DEFAULT_ANTENNA_5G);
+		/* use different smart antenna defaults for 2G and 5G radio.
+		 * use 2G confiuration for dual band radio.
+		 */
+		if (ar->phy_capability & WHAL_WLAN_11G_CAPABILITY) {
+			cmd->antenna_mask =
+				__cpu_to_le32(ATH10K_DEFAULT_ANTENNA_2G);
+		}
+	} else {
+		cmd->antenna_mask = __cpu_to_le32(WMI_BCN_TX_REF_DEF_ANTENNA);
+	}
 
 	if (dtim_zero)
 		cmd->flags |= __cpu_to_le32(WMI_BCN_TX_REF_FLAG_DTIM_ZERO);
@@ -9307,6 +9318,29 @@ ath10k_wmi_fill_set_smart_ant(struct ath10k *ar,
 	return ret;
 }
 
+static struct sk_buff *
+ath10k_wmi_op_gen_pdev_sa_disabled_ant_sel(struct ath10k *ar, u32 mode,
+					   u32 tx_ant, u32 rx_ant)
+{
+	struct wmi_pdev_set_smart_ant_cmd *cmd;
+	struct sk_buff *skb;
+
+	skb = ath10k_wmi_alloc_skb(ar, sizeof(*cmd));
+	if (!skb)
+		return ERR_PTR(-ENOMEM);
+
+	cmd = (struct wmi_pdev_set_smart_ant_cmd *)skb->data;
+	cmd->enable = __cpu_to_le32(WMI_SMART_ANT_DISABLED_ANT_SEL);
+	ath10k_wmi_fill_set_smart_ant(ar, cmd, mode, tx_ant, rx_ant);
+	ath10k_dbg(
+		ar, ATH10K_DBG_WMI,
+		"wmi pdev sa_disable antenna sel, mode %d rx_ant %d def_tx_ant %d\n",
+		mode, rx_ant, tx_ant);
+	return skb;
+}
+#endif
+
+#ifdef CPTCFG_ATH10K_SMART_ANTENNA
 /* Sends initial smart antenna configuration. The configuration includes
  * enabling smart antenna functionality in fw, mode used for smart antenna
  * {mode: parallel or serial GPIOs}, initial tx/rx antenna.
@@ -9562,6 +9596,7 @@ static const struct wmi_ops wmi_ops = {
 	/* .gen_pdev_set_rx_ant not implemented */
 	/* .gen_peer_cfg_smart_ant_fb not implemented */
 	/* .gen_peer_set_smart_ant_train_info not implemented */
+	/* .gen_pdev_sa_disabled_ant_sel not implemented */
 };
 
 static const struct wmi_ops wmi_10_1_ops = {
@@ -9640,6 +9675,7 @@ static const struct wmi_ops wmi_10_1_ops = {
 	/* .gen_pdev_set_rx_ant not implemented */
 	/* .gen_peer_cfg_smart_ant_fb not implemented */
 	/* .gen_peer_set_smart_ant_train_info not implemented */
+	/* .gen_pdev_sa_disabled_ant_sel not implemented */
 };
 
 static const struct wmi_ops wmi_10_2_ops = {
@@ -9719,6 +9755,8 @@ static const struct wmi_ops wmi_10_2_ops = {
 	.gen_peer_set_smart_ant_train_info =
 				ath10k_wmi_op_gen_set_smart_ant_train_info,
 #endif
+	.gen_pdev_sa_disabled_ant_sel =
+				ath10k_wmi_op_gen_pdev_sa_disabled_ant_sel,
 };
 
 static const struct wmi_ops wmi_10_2_4_ops = {
@@ -9804,6 +9842,8 @@ static const struct wmi_ops wmi_10_2_4_ops = {
 	.gen_peer_set_smart_ant_train_info =
 				ath10k_wmi_op_gen_set_smart_ant_train_info,
 #endif
+	.gen_pdev_sa_disabled_ant_sel =
+				ath10k_wmi_op_gen_pdev_sa_disabled_ant_sel,
 };
 
 static const struct wmi_ops wmi_10_4_ops = {
diff --git a/drivers/net/wireless/ath/ath10k/wmi.h b/drivers/net/wireless/ath/ath10k/wmi.h
index ddfb859920d..f820904a5c3 100644
--- a/drivers/net/wireless/ath/ath10k/wmi.h
+++ b/drivers/net/wireless/ath/ath10k/wmi.h
@@ -7452,22 +7452,14 @@ struct wmi_chan_survey_req_cmd {
 
 #ifdef CPTCFG_ATH10K_SMART_ANTENNA
 /*Smart antenna related defs */
-
+#define WMI_SMART_ANT_DISABLED_ANT_SEL	2
+#define WMI_SMART_ANT_DISABLED_MODE_PARALLEL	1
 #define WMI_SMART_ANT_GPIO_MAX		4
-#define WMI_SMART_ANT_MODE_SERIAL	0
-#define WMI_SMART_ANT_MODE_PARALLEL	1
-#define WMI_SMART_ANT_DISABLE		0
-#define WMI_SMART_ANT_ENABLE		1
-#define WMI_SMART_ANT_RATE_SERIES_MAX	2
-#define WMI_SMART_ANT_NODE_CONFIG_ARGS_LEN  4
-#define WMI_SMART_ANT_TX_FEEDBACK_CONFIG_CMD	0x1
-
-#define WMI_CCK_OFDM_RATES_MAX		12
-#define WMI_MCS_RATES_MAX		32
-#define WMI_RATE_COUNT_MAX		4
+#define ATH10K_DEFAULT_ANTENNA_2G 2
+#define ATH10K_DEFAULT_ANTENNA_5G 6
 
 struct wmi_pdev_set_smart_ant_cmd {
-	/* 1 - enable, 0 - disable */
+	/* 0-disable 1- enable, 2 - set default antenna in disabled mode */
 	__le32 enable;
 
 	/* 1 - GPIO parallel mode, 0 - GPIO serial mode */
@@ -7485,6 +7477,21 @@ struct wmi_pdev_set_smart_ant_cmd {
 	/* GPIO functions */
 	__le32 gpio_func[WMI_SMART_ANT_GPIO_MAX];
 } __packed;
+#endif
+
+#ifdef CPTCFG_ATH10K_SMART_ANTENNA
+/*Smart antenna related defs */
+#define WMI_SMART_ANT_MODE_SERIAL	0
+#define WMI_SMART_ANT_MODE_PARALLEL	1
+#define WMI_SMART_ANT_DISABLE		0
+#define WMI_SMART_ANT_ENABLE		1
+#define WMI_SMART_ANT_RATE_SERIES_MAX	2
+#define WMI_SMART_ANT_NODE_CONFIG_ARGS_LEN  4
+#define WMI_SMART_ANT_TX_FEEDBACK_CONFIG_CMD	0x1
+
+#define WMI_CCK_OFDM_RATES_MAX		12
+#define WMI_MCS_RATES_MAX		32
+#define WMI_RATE_COUNT_MAX		4
 
 struct wmi_pdev_set_rx_antenna_cmd {
 	__le32 rx_antenna;
-- 
2.43.0

